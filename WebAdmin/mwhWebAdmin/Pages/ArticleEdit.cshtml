@page "{id}"
@model mwhWebAdmin.Pages.ArticleEditModel
@{
    ViewData["Title"] = "Article Edit";
    var sections = ArticleModelHelpers.Sections;
    var frequencies = ArticleModelHelpers.ChangeFrequency;
}

<div class="container mt-5">
    <h1>Edit Article</h1>

    @* Display TempData messages *@
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["WarningMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <form method="post">
        <input type="hidden" asp-for="Article.Id" />

        <div class="mb-3">
            <label for="Section" class="form-label">Section:</label>
            <select class="form-control" asp-for="Article.Section">
                @foreach (var item in sections.OrderBy(o=>0))
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="Name" class="form-label">Article Title:</label>
            <input type="text" class="form-control" asp-for="Article.Name" />
        </div>

        <div class="mb-3">
            <label for="Subtitle" class="form-label">Subtitle:</label>
            <input type="text" class="form-control" asp-for="Article.Subtitle" placeholder="Enter article subtitle (optional)..." />
            <small class="form-text text-muted">A complementary subtitle that provides additional context</small>
        </div>

        <div class="mb-3">
            <label for="Author" class="form-label">Author:</label>
            <input type="text" class="form-control" asp-for="Article.Author" />
        </div>

        <div class="mb-3">
            <label for="Description" class="form-label">Description:</label>
            <input type="text" class="form-control" asp-for="Article.Description"
                   oninput="updateCharacterCount('articleDescriptionCount', this.value, 'MetaDescription')" />
            <div class="d-flex justify-content-between">
                <small class="form-text text-muted">Brief description of the article for SEO.</small>
                <small id="articleDescriptionCount" class="form-text">0 characters (50-200 recommended)</small>
            </div>
        </div>

        <div class="mb-3">
            <label for="Summary" class="form-label">Summary/Introduction:</label>
            <textarea class="form-control" asp-for="Article.Summary" rows="3" placeholder="2-3 sentence introduction that hooks the reader..."></textarea>
            <small class="form-text text-muted">This will be used as the article introduction or summary</small>
        </div>
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <label for="Keywords" class="form-label">Keywords (comma-separated):</label>
                <div>
                    <button type="submit" asp-page-handler="Validate" class="btn btn-primary btn-sm" id="aiKeywordsBtn" formnovalidate>
                        <i class="fas fa-magic me-2"></i>Generate AI Content
                    </button>
                </div>
            </div>
            <input type="text" class="form-control" asp-for="Article.Keywords" />
            <small class="form-text text-muted">Click "Generate AI Content" to automatically create keywords, descriptions, and all SEO fields using AI.</small>
        </div>

        <div class="mb-3">
            <label for="ArticleContent" class="form-label">Content:</label>
            <textarea class="form-control" asp-for="Article.ArticleContent" rows="8" placeholder="Enter article content in markdown format..."></textarea>
            <small class="form-text text-muted">Use markdown syntax for formatting (# headers, **bold**, *italic*, [links](url), ```code blocks```, etc.). The AI will generate content in markdown format.</small>
        </div>

        <!-- YouTube Video Section -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="fab fa-youtube me-2"></i>YouTube Video</h5>
            </div>
            <div class="card-body">
                <div class="alert alert-info">
                    <h6><i class="fas fa-info-circle me-2"></i>YouTube Integration</h6>
                    <p class="mb-0 small">If this article has an associated YouTube video, provide the URL and title. This will be used for enhanced SEO and social media integration.</p>
                </div>

                <div class="mb-3">
                    <label for="YouTubeUrl" class="form-label fw-bold">YouTube Video URL:</label>
                    <input type="url" class="form-control" asp-for="Article.YouTubeUrl"
                        placeholder="https://www.youtube.com/watch?v=VIDEO_ID or https://youtu.be/VIDEO_ID" />
                    <small class="form-text text-muted">Full YouTube URL for the video associated with this article (optional)</small>
                </div>

                <div class="mb-3">
                    <label for="YouTubeTitle" class="form-label fw-bold">YouTube Video Title:</label>
                    <input type="text" class="form-control" asp-for="Article.YouTubeTitle"
                        placeholder="Enter the YouTube video title..." />
                    <small class="form-text text-muted">The title of the YouTube video (optional, used for enhanced metadata)</small>
                </div>
            </div>
        </div>

        <!-- Enhanced SEO Section -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-search me-2"></i>SEO Optimization</h5>
                <button type="button" class="btn btn-sm btn-outline-primary" onclick="generateSeoFields()">
                    <i class="fas fa-magic me-2"></i>Auto-Generate with AI
                </button>
            </div>
            <div class="card-body">
                <!-- SEO Title -->
                <div class="mb-3">
                    <label for="SeoTitle" class="form-label fw-bold">SEO Title:</label>
                    <input type="text" class="form-control" asp-for="Article.Seo.Title" placeholder="SEO-optimized title (leave blank to use article title)"
                           oninput="updateCharacterCount('seoTitleCount', this.value, 'Title')" />
                    <div class="d-flex justify-content-between">
                        <small class="form-text text-muted">If provided, this will be used instead of the article title for search engines.</small>
                        <small id="seoTitleCount" class="form-text">0 characters (30-60 recommended)</small>
                    </div>
                </div>

                <!-- SEO Description -->
                <div class="mb-3">
                    <label for="SeoDescription" class="form-label fw-bold">SEO Description:</label>
                    <textarea class="form-control" asp-for="Article.Seo.Description" rows="2" placeholder="SEO-optimized description (150-160 characters)"
                              oninput="updateCharacterCount('seoDescriptionCount', this.value, 'MetaDescription')"></textarea>
                    <div class="d-flex justify-content-between">
                        <small class="form-text text-muted">If provided, this will be used instead of the basic description for search engines.</small>
                        <small id="seoDescriptionCount" class="form-text">0 characters (150-320 characters)</small>
                    </div>
                </div>

                <!-- SEO Keywords -->
                <div class="mb-3">
                    <label for="SeoKeywords" class="form-label fw-bold">SEO Keywords:</label>
                    <input type="text" class="form-control" asp-for="Article.Seo.Keywords" placeholder="keyword1, keyword2, keyword3"
                           oninput="updateKeywordCount('seoKeywordsCount', this.value)" />
                    <div class="d-flex justify-content-between">
                        <small class="form-text text-muted">Targeted keywords for search engine optimization.</small>
                        <small id="seoKeywordsCount" class="form-text">0 keywords (3-8 recommended)</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Social Media Section -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-share-alt me-2"></i>Social Media Preview</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Open Graph (Facebook/LinkedIn)</h6>
                        <div class="mb-3">
                            <label for="OgTitle" class="form-label">Title:</label>
                            <input type="text" class="form-control" asp-for="Article.OpenGraph.Title" placeholder="Social media title"
                                   oninput="updateCharacterCount('ogTitleCount', this.value, 'OpenGraphTitle')" />
                            <small id="ogTitleCount" class="form-text">0 characters (30-65 recommended)</small>
                        </div>
                        <div class="mb-3">
                            <label for="OgDescription" class="form-label">Description:</label>
                            <textarea class="form-control" asp-for="Article.OpenGraph.Description" rows="2" placeholder="Social media description (200-300 characters)"
                                      oninput="updateCharacterCount('ogDescriptionCount', this.value, 'OpenGraphDescription')"></textarea>
                            <small id="ogDescriptionCount" class="form-text">0 characters (100-300 characters)</small>
                        </div>
                        <div class="mb-3">
                            <label for="OgImageAlt" class="form-label">Image Alt Text:</label>
                            <input type="text" class="form-control" asp-for="Article.OpenGraph.ImageAlt" placeholder="Description of the image" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>Twitter Card</h6>
                        <div class="mb-3">
                            <label for="TwitterTitle" class="form-label">Title:</label>
                            <input type="text" class="form-control" asp-for="Article.TwitterCard.Title" placeholder="Twitter title (shorter)"
                                   oninput="updateCharacterCount('twitterTitleCount', this.value, 'TwitterTitle')" />
                            <small id="twitterTitleCount" class="form-text">0 characters (max 50)</small>
                        </div>
                        <div class="mb-3">
                            <label for="TwitterDescription" class="form-label">Description:</label>
                            <textarea class="form-control" asp-for="Article.TwitterCard.Description" rows="2" placeholder="Twitter description (120-200 characters)"
                                      oninput="updateCharacterCount('twitterDescriptionCount', this.value, 'TwitterDescription')"></textarea>
                            <small id="twitterDescriptionCount" class="form-text">0 characters (120-200 characters)</small>
                        </div>
                        <div class="mb-3">
                            <label for="TwitterImageAlt" class="form-label">Image Alt Text:</label>
                            <input type="text" class="form-control" asp-for="Article.TwitterCard.ImageAlt" placeholder="Description of the image" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Conclusion Section -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-flag-checkered me-2"></i>Conclusion Section</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="ConclusionTitle" class="form-label fw-bold">Conclusion Title:</label>
                    <input type="text" class="form-control" asp-for="Article.ConclusionTitle" placeholder="e.g., Key Takeaways, Final Thoughts, What's Next..." />
                    <small class="form-text text-muted">Compelling heading for the conclusion section</small>
                </div>

                <div class="mb-3">
                    <label for="ConclusionSummary" class="form-label fw-bold">Conclusion Summary:</label>
                    <textarea class="form-control" asp-for="Article.ConclusionSummary" rows="3" placeholder="Brief summary of the key points covered in the article..."></textarea>
                    <small class="form-text text-muted">2-3 sentences summarizing the main points</small>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="ConclusionKeyHeading" class="form-label fw-bold">Key Takeaway Heading:</label>
                        <input type="text" class="form-control" asp-for="Article.ConclusionKeyHeading" placeholder="e.g., Bottom Line, Key Insight, Action Item..." />
                        <small class="form-text text-muted">Short, impactful heading</small>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="ConclusionKeyText" class="form-label fw-bold">Key Takeaway Text:</label>
                        <textarea class="form-control" asp-for="Article.ConclusionKeyText" rows="2" placeholder="Main insight or actionable takeaway..."></textarea>
                        <small class="form-text text-muted">1-2 sentences with the key insight</small>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="ConclusionText" class="form-label fw-bold">Final Thoughts:</label>
                    <textarea class="form-control" asp-for="Article.ConclusionText" rows="3" placeholder="Final thoughts, call to action, or next steps..."></textarea>
                    <small class="form-text text-muted">Closing thoughts and call to action for readers</small>
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label for="Slug" class="form-label">Slug:</label>
            <input type="text" class="form-control" asp-for="Article.Slug" />
        </div>

        <!-- Source File Information -->
        <div class="mb-3">
            <label class="form-label fw-bold">PUG Source File:</label>
            <div class="card">
                <div class="card-body">
                    @if (Model.Article.SourceFileExists)
                    {
                        <div class="d-flex align-items-center text-success">
                            <i class="fas fa-file-code me-2"></i>
                            <span class="me-2">Source file found:</span>
                            <code class="bg-light px-2 py-1 rounded">@Model.Article.Source</code>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(Model.Article.Source))
                    {
                        <div class="d-flex align-items-center text-warning">
                            <i class="fas fa-file-times me-2"></i>
                            <span class="me-2">Source file not found:</span>
                            <code class="bg-light px-2 py-1 rounded">@Model.Article.Source</code>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex align-items-center text-muted">
                            <i class="fas fa-file-slash me-2"></i>
                            <span>No PUG source file configured for this article</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Image Selection Section -->
        <div class="mb-3">
            <label class="form-label fw-bold">Image Source:</label>

            <!-- Current/Selected Image Preview -->
            <div class="mb-3">
                <div class="image-preview-container text-center">
                    @{
                        string imageUrl = !string.IsNullOrEmpty(Model.Article.ImgSrc) ? "/" + Model.Article.ImgSrc : "/assets/img/placeholder.svg";
                        string imageName = !string.IsNullOrEmpty(Model.Article.ImgSrc) ? Model.Article.ImgSrc : "No image selected";
                    }
                    <img id="selectedImagePreview"
                         src="@imageUrl"
                         alt="@imageName"
                         class="img-fluid rounded border"
                         style="max-height: 200px; object-fit: cover; width: 100%;"
                         onerror="this.src='/assets/img/placeholder.svg'; this.alt='No image selected';" />
                    <div class="mt-2">
                        <small id="selectedImageName" class="text-muted">@imageName</small>
                    </div>
                </div>
            </div>

            <!-- Hidden input for form submission -->
            <input asp-for="Article.ImgSrc" type="hidden" id="selectedImageInput" />
            <span asp-validation-for="Article.ImgSrc" class="text-danger"></span>
        </div>

        <!-- Image Selection Grid -->
        <div class="mb-4">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-images me-2"></i>Choose an Image</h6>
                </div>
                <div class="card-body">
                    <div class="image-grid">
                        <!-- No Image Option -->
                        <div class="image-option @(string.IsNullOrEmpty(Model.Article.ImgSrc) ? "border-primary selected" : "")" data-image-path="">
                            <div class="image-option-content">
                                <div class="image-placeholder">
                                    <i class="fas fa-ban text-muted"></i>
                                </div>
                                <small class="image-name">No Image</small>
                            </div>
                        </div>

                        <!-- Available Images -->
                        @foreach (var imagePath in Model.AvailableImages)
                        {
                            <div class="image-option @(imagePath == Model.Article.ImgSrc ? "border-primary selected" : "")" data-image-path="@imagePath">
                                <div class="image-option-content">
                                    <img src="/@imagePath"
                                         alt="@System.IO.Path.GetFileName(imagePath)"
                                         class="image-thumbnail"
                                         onerror="this.parentElement.innerHTML='<div class=\'image-error\'><i class=\'fas fa-exclamation-triangle\'></i></div>';" />
                                    <small class="image-name" title="@imagePath">
                                        @System.IO.Path.GetFileName(imagePath)
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="mb-3">
            <label for="ChangeFrequency" class="form-label">Change Frequency:</label>
            <select class="form-control" asp-for="Article.ChangeFrequency">
                @foreach (var item in @frequencies.OrderBy(o => 0))
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <button type="submit" class="btn btn-primary" asp-page-handler="">
                        <i class="fas fa-save me-2"></i>Save Article
                    </button>
                    <a href="/Articles" class="btn btn-secondary ms-2">
                        <i class="fas fa-arrow-left me-2"></i>Back to Articles
                    </a>
                </div>
                <div>
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>
                        Changes are saved without automatic AI processing. Use the "Generate AI Content" button above for AI-powered content generation.
                    </small>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script src="~/js/seo-validation-config.js"></script>
    <script>        document.addEventListener('DOMContentLoaded', function() {
            // Initialize image selection functionality
            const imageOptions = document.querySelectorAll('.image-option');
            const selectedImageInput = document.getElementById('selectedImageInput');
            const selectedImagePreview = document.getElementById('selectedImagePreview');
            const selectedImageName = document.getElementById('selectedImageName');

            imageOptions.forEach(function(option) {
                option.addEventListener('click', function() {
                    // Remove selected class from all options
                    imageOptions.forEach(opt => opt.classList.remove('selected'));

                    // Add selected class to clicked option
                    this.classList.add('selected');

                    // Get the image path
                    const imagePath = this.getAttribute('data-image-path');

                    // Update hidden input
                    selectedImageInput.value = imagePath;

                    // Update preview
                    if (imagePath) {
                        selectedImagePreview.src = '/' + imagePath;
                        selectedImagePreview.alt = 'Selected Image: ' + imagePath;
                        selectedImageName.textContent = imagePath;
                    } else {
                        selectedImagePreview.src = '/assets/img/placeholder.svg';
                        selectedImagePreview.alt = 'No image selected';
                        selectedImageName.textContent = 'No image selected';
                    }

                    // Handle image load errors
                    selectedImagePreview.onerror = function() {
                        this.src = '/assets/img/placeholder.svg';
                        this.alt = 'Image not found';
                        selectedImageName.textContent = imagePath ? imagePath + ' (not found)' : 'No image selected';
                    };
                });
            });            // Initialize character counts
            initializeCharacterCounts();
        });

        // Initialize character counts on page load
        function initializeCharacterCounts() {
            // Article fields
            const articleDescription = document.querySelector('input[name="Article.Description"]');

            // SEO fields
            const seoTitle = document.querySelector('input[name="Article.Seo.Title"]');
            const seoDescription = document.querySelector('textarea[name="Article.Seo.Description"]');
            const seoKeywords = document.querySelector('input[name="Article.Seo.Keywords"]');

            // Social media fields
            const ogTitle = document.querySelector('input[name="Article.OpenGraph.Title"]');
            const ogDescription = document.querySelector('textarea[name="Article.OpenGraph.Description"]');
            const twitterTitle = document.querySelector('input[name="Article.TwitterCard.Title"]');
            const twitterDescription = document.querySelector('textarea[name="Article.TwitterCard.Description"]');

            // Initialize counters using centralized config
            if (articleDescription) updateCharacterCount('articleDescriptionCount', articleDescription.value, 'MetaDescription');
            if (seoTitle) updateCharacterCount('seoTitleCount', seoTitle.value, 'Title');
            if (seoDescription) updateCharacterCount('seoDescriptionCount', seoDescription.value, 'MetaDescription');
            if (seoKeywords) updateKeywordCount('seoKeywordsCount', seoKeywords.value);
            if (ogTitle) updateCharacterCount('ogTitleCount', ogTitle.value, 'OpenGraphTitle');
            if (ogDescription) updateCharacterCount('ogDescriptionCount', ogDescription.value, 'OpenGraphDescription');
            if (twitterTitle) updateCharacterCount('twitterTitleCount', twitterTitle.value, 'TwitterTitle');
            if (twitterDescription) updateCharacterCount('twitterDescriptionCount', twitterDescription.value, 'TwitterDescription');
        }

        // Check if we have a success message from AI validation and highlight updated fields
        function checkForAIUpdates() {
            const successAlert = document.querySelector('.alert-success');
            if (successAlert && successAlert.textContent.includes('AI')) {
                highlightAIUpdatedFields();
            }
        }

        // Highlight fields that were likely updated by AI
        function highlightAIUpdatedFields() {
            const fieldsToHighlight = [
                'input[name="Article.Keywords"]',
                'input[name="Article.Description"]',
                'textarea[name="Article.Summary"]',
                'input[name="Article.Seo.Title"]',
                'textarea[name="Article.Seo.Description"]',
                'input[name="Article.OpenGraph.Title"]',
                'textarea[name="Article.OpenGraph.Description"]',
                'input[name="Article.TwitterCard.Title"]',
                'textarea[name="Article.TwitterCard.Description"]',
                'input[name="Article.ConclusionTitle"]',
                'textarea[name="Article.ConclusionSummary"]',
                'input[name="Article.ConclusionKeyHeading"]',
                'textarea[name="Article.ConclusionKeyText"]',
                'textarea[name="Article.ConclusionText"]'
            ];

            fieldsToHighlight.forEach(selector => {
                const field = document.querySelector(selector);
                if (field && field.value.trim()) {
                    field.style.backgroundColor = '#d4edda';
                    field.style.borderColor = '#c3e6cb';
                    field.style.transition = 'all 0.3s ease';

                    // Remove highlight after 8 seconds
                    setTimeout(() => {
                        field.style.backgroundColor = '';
                        field.style.borderColor = '';
                    }, 8000);
                }
            });
        }

        // Initialize everything when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Check for AI updates and highlight fields
            checkForAIUpdates();
        });

        async function generateSeoFields() {
            const title = document.querySelector('input[name="Article.Name"]').value;
            const content = document.querySelector('textarea[name="Article.ArticleContent"]').value;

            if (!title) {
                alert('Please enter article title before generating SEO fields.');
                return;
            }

            const button = document.querySelector('button[onclick="generateSeoFields()"]');
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating...';
            button.disabled = true;

            try {
                const response = await fetch('/api/test/test-seo-generation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        title: title,
                        content: content
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Populate main article fields
                    if (data.generatedSeo.articleTitle) {
                        document.querySelector('input[name="Article.Name"]').value = data.generatedSeo.articleTitle;
                    }
                    if (data.generatedSeo.articleDescription) {
                        document.querySelector('input[name="Article.Description"]').value = data.generatedSeo.articleDescription;
                    }
                    if (data.generatedSeo.articleContent) {
                        document.querySelector('textarea[name="Article.ArticleContent"]').value = data.generatedSeo.articleContent;
                    }

                    // Populate SEO fields
                    if (data.generatedSeo.seoTitle) {
                        document.querySelector('input[name="Article.Seo.Title"]').value = data.generatedSeo.seoTitle;
                    }
                    if (data.generatedSeo.seoDescription) {
                        document.querySelector('textarea[name="Article.Seo.Description"]').value = data.generatedSeo.seoDescription;
                    }
                    if (data.generatedSeo.keywords) {
                        document.querySelector('input[name="Article.Seo.Keywords"]').value = data.generatedSeo.keywords;
                        // Also populate the main Keywords field
                        document.querySelector('input[name="Article.Keywords"]').value = data.generatedSeo.keywords;
                    }

                    // Populate Social Media fields
                    if (data.generatedSeo.openGraphTitle) {
                        document.querySelector('input[name="Article.OpenGraph.Title"]').value = data.generatedSeo.openGraphTitle;
                    }
                    if (data.generatedSeo.openGraphDescription) {
                        document.querySelector('textarea[name="Article.OpenGraph.Description"]').value = data.generatedSeo.openGraphDescription;
                    }
                    if (data.generatedSeo.twitterTitle) {
                        document.querySelector('input[name="Article.TwitterCard.Title"]').value = data.generatedSeo.twitterTitle;
                    }
                    if (data.generatedSeo.twitterDescription) {
                        document.querySelector('textarea[name="Article.TwitterCard.Description"]').value = data.generatedSeo.twitterDescription;
                    }

                    // Populate Article content fields
                    if (data.generatedSeo.subtitle) {
                        document.querySelector('input[name="Article.Subtitle"]').value = data.generatedSeo.subtitle;
                    }
                    if (data.generatedSeo.summary) {
                        document.querySelector('textarea[name="Article.Summary"]').value = data.generatedSeo.summary;
                    }

                    // Populate Conclusion section fields
                    if (data.generatedSeo.conclusionTitle) {
                        document.querySelector('input[name="Article.ConclusionTitle"]').value = data.generatedSeo.conclusionTitle;
                    }
                    if (data.generatedSeo.conclusionSummary) {
                        document.querySelector('textarea[name="Article.ConclusionSummary"]').value = data.generatedSeo.conclusionSummary;
                    }
                    if (data.generatedSeo.conclusionKeyHeading) {
                        document.querySelector('input[name="Article.ConclusionKeyHeading"]').value = data.generatedSeo.conclusionKeyHeading;
                    }
                    if (data.generatedSeo.conclusionKeyText) {
                        document.querySelector('textarea[name="Article.ConclusionKeyText"]').value = data.generatedSeo.conclusionKeyText;
                    }
                    if (data.generatedSeo.conclusionText) {
                        document.querySelector('textarea[name="Article.ConclusionText"]').value = data.generatedSeo.conclusionText;
                    }

                    // Update character counters after populating fields
                    initializeCharacterCounts();

                    // Show success message
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-success alert-dismissible fade show';
                    alertDiv.innerHTML = `
                        <strong>Success!</strong> SEO fields have been generated using AI.
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    document.querySelector('.card-body').prepend(alertDiv);

                    // Auto-dismiss after 5 seconds
                    setTimeout(() => {
                        alertDiv.remove();
                    }, 5000);
                } else {
                    alert('Error generating SEO fields: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                alert('Request failed: ' + error.message);
            } finally {
                button.innerHTML = originalText;
                button.disabled = false;
            }
        }
    </script>
}
