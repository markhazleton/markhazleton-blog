extends layouts/modern-layout

block layout-content
  // Hero Section
  section.bg-gradient-primary.py-5
    .container
      .row.align-items-center
        .col-lg-10.mx-auto.text-center
          h1.display-4.fw-bold.mb-3
            i.bi.bi-layers.me-3
            | Decorator Design Pattern
          h2.h3.mb-4 Adding Telemetry to HttpClient in ASP.NET Core
          p.lead.mb-5 Master the Decorator Pattern to enhance HttpClient functionality with telemetry, logging, and caching capabilities while maintaining clean, maintainable code architecture.

  // Main Article
  article#main-article
    .container
      .row
        .col-lg-8.mx-auto
          header.mb-5
            .article-meta.text-muted.mb-4
              time(datetime='2025-01-12') January 12, 2025
              span.mx-2 •
              span 12 min read
              span.mx-2 •
              span by Mark Hazleton

          // Table of Contents
          nav.mb-5(aria-label='Table of Contents')
            .card.shadow-sm
              .card-header.bg-primary.text-white
                h3.mb-0
                  i.bi.bi-list-ul.me-2
                  | Contents
              .card-body
                ol.list-group.list-group-numbered.list-group-flush
                  li.list-group-item
                    a.text-decoration-none(href='#introduction') Introduction to Decorator Pattern
                  li.list-group-item
                    a.text-decoration-none(href='#concepts') Core Concepts & Definitions
                  li.list-group-item
                    a.text-decoration-none(href='#interfaces') Interface Design
                  li.list-group-item
                    a.text-decoration-none(href='#implementations') Service Implementations
                  li.list-group-item
                    a.text-decoration-none(href='#integration') Integration & Configuration
                  li.list-group-item
                    a.text-decoration-none(href='#use-cases') Additional Use Cases
                  li.list-group-item
                    a.text-decoration-none(href='#conclusion') Conclusion

          // Introduction Section
          section#introduction.mb-5
            h2.h3.mb-4
              i.bi.bi-info-circle.me-2
              | Introduction to the Decorator Pattern            .alert.alert-info.mb-4
              .d-flex.align-items-start
                i.bi.bi-lightbulb.me-3.fs-4.text-primary
                div
                  h5.alert-heading Pattern Overview
                  p.mb-0 The Decorator Design Pattern is a structural design pattern that allows behavior to be added to individual objects, either statically or dynamically, without affecting other objects from the same class.

            p.lead The Decorator Pattern provides a flexible alternative to sub-classing by dynamically wrapping objects in decorator objects that add new functionality while preserving the original interface.

            p This pattern works by creating a base class/interface that defines the basic behavior and then defining decorator classes that add additional behavior. Each decorator wraps an instance of the base interface and provides its implementation of enhanced functionality.

            .card.border-info.mb-4
              .card-header.bg-info.text-white
                h5.mb-0
                  i.bi.bi-code-square.me-2
                  | Live Demo
              .card-body
                p.mb-3 The current demonstration is hosted on my WebSpark site:
                .d-grid.gap-2.d-md-block
                  a.btn.btn-primary(href='https://webspark.markhazleton.com/asyncspark' target='_blank' rel='noopener noreferrer')
                    i.bi.bi-box-arrow-up-ne.me-2
                    | View AsyncSpark Demo

          // Core Concepts Section
          section#concepts.mb-5
            h2.h3.mb-4
              i.bi.bi-book.me-2
              | Core Concepts & Definitions

            .row.g-4.mb-4
              .col-md-6
                .card.h-100.border-primary
                  .card-header.bg-primary.text-white
                    h5.mb-0
                      i.bi.bi-puzzle.me-2
                      | Design Patterns
                  .card-body
                    p Design patterns are proven solutions to common software design problems, discovered and refined by experienced developers over time.
                    p.mb-0 First documented by the "Gang of Four" in 1994, these patterns enable more maintainable, reusable, and scalable code.

              .col-md-6
                .card.h-100.border-success
                  .card-header.bg-success.text-white
                    h5.mb-0
                      i.bi.bi-globe.me-2
                      | HTTP Protocol
                  .card-body
                    p Hypertext Transfer Protocol (HTTP) is the foundation of data communication for the World Wide Web.
                    p.mb-0 It's a request-response protocol where clients send requests to servers and receive responses containing requested information.

            .row.g-4.mb-4
              .col-md-6
                .card.h-100.border-warning
                  .card-header.bg-warning.text-white
                    h5.mb-0
                      i.bi.bi-laptop.me-2
                      | HTTP Client
                  .card-body
                    p An HTTP client is a software component that allows programs to send HTTP requests and receive responses.
                    p.mb-0 Essential for interacting with web-based applications and APIs using the HTTP protocol.

              .col-md-6
                .card.h-100.border-info
                  .card-header.bg-info.text-white
                    h5.mb-0
                      i.bi.bi-gear.me-2
                      | HttpClient Class
                  .card-body
                    p The .NET HttpClient class provides a high-level API for making HTTP requests with platform-independent implementation.
                    p.mb-0 Offers consistent functionality across platforms while leveraging platform-specific optimizations.

            .alert.alert-warning.border-warning
              .d-flex.align-items-start
                i.bi.bi-graph-up.me-3.fs-4.text-warning
                div
                  h5.alert-heading Telemetry Importance
                  p.mb-0 Telemetry involves collecting, transmitting, and analyzing application performance data. It's crucial for monitoring performance, identifying issues, and understanding usage patterns.

          // Interface Design Section
          section#interfaces.mb-5
            h2.h3.mb-4
              i.bi.bi-diagram-3.me-2
              | Interface Design

            p.mb-4 The decorator pattern relies on well-defined interfaces that both concrete and decorator classes implement. Our implementation uses two key interfaces:

            .row.g-4.mb-4
              .col-lg-6
                .card.border-primary.h-100
                  .card-header.bg-primary.text-white
                    h5.mb-0
                      i.bi.bi-play-circle.me-2
                      | IHttpGetCallService
                  .card-body
                    p Defines methods for making HTTP requests and returning response data using generics.
                    pre.language-csharp.bg-light.p-3.rounded
                      code.language-csharp.
                        public interface IHttpGetCallService
                        {
                          Task&lt;HttpGetCallResults&lt;T&gt;&gt; GetAsync&lt;T&gt;(
                            HttpGetCallResults&lt;T&gt; callResults
                          );
                        }

              .col-lg-6
                .card.border-success.h-100
                  .card-header.bg-success.text-white
                    h5.mb-0
                      i.bi.bi-clipboard-data.me-2
                      | IHttpGetCallResults
                  .card-body
                    p Defines properties for HTTP call response data including timing, errors, and results.
                    pre.language-csharp.bg-light.p-3.rounded
                      code.language-csharp.
                        public interface IHttpGetCallResults&lt;T&gt;
                        {
                          DateTime? CompletionDate { get; set; }
                          long ElapsedMilliseconds { get; set; }
                          string? ErrorMessage { get; set; }
                          int Id { get; set; }
                          int Iteration { get; set; }
                          string RequestPath { get; set; }
                          T? ResponseResults { get; set; }
                          int Retries { get; set; }
                        }

            .alert.alert-info.border-info
              .d-flex.align-items-start
                i.bi.bi-info-circle.me-3.fs-4.text-info
                div
                  h5.alert-heading Generic Type Benefits
                  p.mb-0 The HttpGetCallResults&lt;T&gt; generic implementation provides compile-time type checking, improved IntelliSense, and strongly-typed response handling, making code cleaner and more maintainable.

          // Service Implementations Section
          section#implementations.mb-5
            h2.h3.mb-4
              i.bi.bi-tools.me-2
              | Service Implementations

            p.mb-4 The Decorator Pattern involves two implementation types: concrete and decorator implementations that work together seamlessly.

            .card.border-primary.mb-4
              .card-header.bg-primary.text-white
                h4.mb-0
                  i.bi.bi-box.me-2
                  | Concrete Implementation
              .card-body
                p.mb-3 The concrete implementation provides core functionality - the original object being decorated with basic HTTP request capabilities.

                .alert.alert-light.border-left-primary
                  h6.fw-bold Key Features:
                  ul.mb-0
                    li Error handling with null checks
                    li JSON deserialization with fallback
                    li HttpClient factory integration
                    li Comprehensive logging

                pre.language-csharp.bg-light.p-3.rounded
                  code.language-csharp.
                    public async Task&lt;HttpGetCallResults&lt;T&gt;&gt; GetAsync&lt;T&gt;(
                      HttpGetCallResults&lt;T&gt; callResults)
                    {
                      if (callResults == null)
                      {
                        throw new ArgumentNullException(nameof(callResults));
                      }

                      try
                      {
                        using var httpClient = _clientFactory.CreateClient();
                        var request = new HttpRequestMessage(
                          HttpMethod.Get, callResults.RequestPath);
                        var response = await httpClient.SendAsync(request);
                        response.EnsureSuccessStatusCode();

                        var content = await response.Content.ReadAsStringAsync();
                        callResults.ResponseResults =
                          JsonSerializer.Deserialize&lt;T&gt;(content);
                      }
                      catch (Exception ex)
                      {
                        _logger.LogCritical(ex.Message);
                        callResults.ErrorMessage = ex.Message;
                      }

                      return callResults;
                    }

            .card.border-success.mb-4
              .card-header.bg-success.text-white
                h4.mb-0
                  i.bi.bi-layers.me-2
                  | Decorator Implementation
              .card-body
                p.mb-3 The decorator wraps the concrete implementation, adding telemetry functionality while maintaining the same interface.

                .alert.alert-light.border-left-success
                  h6.fw-bold Telemetry Features:
                  ul.mb-0
                    li Performance timing with Stopwatch
                    li Completion timestamp tracking
                    li Exception handling and logging
                    li Transparent call forwarding

                pre.language-csharp.bg-light.p-3.rounded
                  code.language-csharp.
                    public async Task&lt;HttpGetCallResults&lt;T&gt;&gt; GetAsync&lt;T&gt;(
                      HttpGetCallResults&lt;T&gt; callResults)
                    {
                      Stopwatch sw = new();
                      sw.Start();

                      var response = new HttpGetCallResults&lt;T&gt;(callResults);

                      try
                      {
                        response = await _service.GetAsync&lt;T&gt;(callResults);
                      }
                      catch (Exception ex)
                      {
                        _logger.LogCritical("Telemetry:GetAsync:Exception",
                          ex.Message);
                      }

                      sw.Stop();
                      response.ElapsedMilliseconds = sw.ElapsedMilliseconds;
                      response.CompletionDate = DateTime.Now;

                      return response;
                    }

          // Integration Section
          section#integration.mb-5
            h2.h3.mb-4
              i.bi.bi-puzzle-fill.me-2
              | Integration & Configuration

            p.mb-4 Configure the decorator pattern in your Program.cs file using dependency injection to seamlessly integrate telemetry capabilities.

            .card.border-info.mb-4
              .card-header.bg-info.text-white
                h5.mb-0
                  i.bi.bi-gear-fill.me-2
                  | Dependency Injection Setup
              .card-body
                pre.language-csharp.bg-light.p-3.rounded
                  code.language-csharp.
                    // Configure HttpClient with timeout and headers
                    builder.Services.AddHttpClient("webspark.markhazleton.com",
                      client =&gt;
                    {
                      client.Timeout = TimeSpan.FromMilliseconds(1500);
                      client.DefaultRequestHeaders.Add("Accept", "application/json");
                      client.DefaultRequestHeaders.Add("User-Agent",
                        "webspark.markhazleton.com");
                      client.DefaultRequestHeaders.Add("X-Request-ID",
                        Guid.NewGuid().ToString());
                    });

                    // Register decorator pattern with telemetry wrapper
                    builder.Services.AddSingleton&lt;IHttpGetCallService&gt;(
                      serviceProvider =&gt;
                    {
                      var logger = serviceProvider
                        .GetRequiredService&lt;ILogger&lt;HttpGetCallService&gt;&gt;();
                      var telemetryLogger = serviceProvider
                        .GetRequiredService&lt;ILogger&lt;HttpGetCallServiceTelemetry&gt;&gt;();
                      var httpClientFactory = serviceProvider
                        .GetRequiredService&lt;IHttpClientFactory&gt;();

                      IHttpGetCallService baseService =
                        new HttpGetCallService(logger, httpClientFactory);
                      IHttpGetCallService telemetryService =
                        new HttpGetCallServiceTelemetry(telemetryLogger, baseService);

                      return telemetryService;
                    });

            .card.border-warning.mb-4
              .card-header.bg-warning.text-white
                h5.mb-0
                  i.bi.bi-code-slash.me-2
                  | Razor Page Implementation
              .card-body
                p.mb-3 Example implementation using the decorated service in a Razor Page to fetch jokes from an API:

                pre.language-csharp.bg-light.p-3.rounded
                  code.language-csharp.
                    public class JokeModel : PageModel
                    {
                      private readonly ILogger&lt;JokeModel&gt; _logger;
                      private readonly IHttpGetCallService _service;

                      public HttpGetCallResults&lt;Joke&gt; JokeResult { get; set; }
                      public Joke TheJoke { get; set; } = new Joke();

                      public JokeModel(ILogger&lt;JokeModel&gt; logger,
                        IHttpGetCallService getCallService)
                      {
                        _logger = logger;
                        _service = getCallService;
                      }

                      public async Task OnGet(CancellationToken ct = default)
                      {
                        JokeResult = new HttpGetCallResults&lt;Joke&gt;
                        {
                          RequestPath = "https://v2.jokeapi.dev/joke/Any?safe-mode"
                        };

                        JokeResult = await _service.GetAsync(JokeResult, ct);

                        TheJoke = JokeResult?.ResponseResults ?? new Joke
                        {
                          error = true
                        };
                      }
                    }

          // Additional Use Cases Section
          section#use-cases.mb-5
            h2.h3.mb-4
              i.bi.bi-lightning-charge.me-2
              | Additional Use Cases & Extensions

            p.mb-4 The decorator pattern's flexibility allows for multiple enhancements to HttpClient functionality beyond telemetry:

            .row.g-4.mb-4
              .col-md-4
                .card.border-primary.h-100
                  .card-header.bg-primary.text-white
                    h5.mb-0
                      i.bi.bi-journal-text.me-2
                      | Logging Decorator
                  .card-body
                    p.small.text-muted Debugging & Auditing
                    p Automatically log all HTTP requests and responses including headers, status codes, and payloads.
                    ul.small
                      li Request/response logging
                      li Header inspection
                      li Status code tracking
                      li Payload monitoring

              .col-md-4
                .card.border-success.h-100
                  .card-header.bg-success.text-white
                    h5.mb-0
                      i.bi.bi-lightning.me-2
                      | Caching Decorator
                  .card-body
                    p.small.text-muted Performance Optimization
                    p Improve performance by caching responses and serving from cache when possible.
                    ul.small
                      li Response caching
                      li Cache invalidation
                      li TTL management
                      li Memory optimization

              .col-md-4
                .card.border-warning.h-100
                  .card-header.bg-warning.text-white
                    h5.mb-0
                      i.bi.bi-arrow-repeat.me-2
                      | Retry Decorator
                  .card-body
                    p.small.text-muted Resilience & Reliability
                    p Automatically retry failed requests using Polly library with configurable policies.
                    ul.small
                      li Exponential backoff
                      li Circuit breaker
                      li Timeout handling
                      li Policy configuration

            .alert.alert-success.border-success
              .d-flex.align-items-start
                i.bi.bi-lightbulb.me-3.fs-4.text-success
                div
                  h5.alert-heading Decorator Composition
                  p.mb-0 These decorators can be combined and layered to create a powerful, feature-rich HTTP client with telemetry, logging, caching, and retry capabilities all working together seamlessly.

          // Source Code Section
          .card.border-dark.mb-5
            .card-header.bg-dark.text-white
              h4.mb-0
                i.bi.bi-github.me-2
                | Source Code & Demo
            .card-body.text-center
              p.mb-4 Complete source code and working examples are available on GitHub:
              .d-grid.gap-2.d-md-flex.justify-content-md-center
                a.btn.btn-primary(href='https://github.com/markhazleton/webspark' target='_blank' rel='noopener noreferrer')
                  i.bi.bi-github.me-2
                  | View WebSpark Repository
                a.btn.btn-outline-primary(href='https://github.com/markhazleton/samplemvccrud/' target='_blank' rel='noopener noreferrer')
                  i.bi.bi-code-slash.me-2
                  | Sample MVC Implementation

          // Conclusion Section
          section#conclusion.mb-5
            h2.h3.mb-4
              i.bi.bi-check-circle.me-2
              | Conclusion

            .row.g-4.mb-4
              .col-md-6
                .card.border-success.h-100
                  .card-header.bg-success.text-white
                    h5.mb-0
                      i.bi.bi-award.me-2
                      | Pattern Benefits
                  .card-body
                    ul.mb-0
                      li Dynamic behavior addition
                      li No sub-classing required
                      li Flexible object composition
                      li Single responsibility principle
                      li Open/closed principle adherence

              .col-md-6
                .card.border-info.h-100
                  .card-header.bg-info.text-white
                    h5.mb-0
                      i.bi.bi-gear-wide-connected.me-2
                      | Implementation Advantages
                  .card-body
                    ul.mb-0
                      li Clean separation of concerns
                      li Easy to test and maintain
                      li Interchangeable components
                      li Enhanced functionality without modification
                      li Scalable architecture

            p.lead.text-center.mb-4 The Decorator Design Pattern provides a powerful and flexible way to enhance object functionality dynamically while maintaining clean, maintainable code architecture.

            .alert.alert-primary.border-primary
              .d-flex.align-items-start
                i.bi.bi-trophy.me-3.fs-4.text-primary
                div
                  h5.alert-heading Key Takeaways
                  p.mb-2 By implementing the decorator pattern with HttpClient, we've demonstrated how to:
                  ul.mb-0
                    li Add telemetry capabilities without modifying core functionality
                    li Create reusable, composable components
                    li Maintain clean separation between concerns
                    li Build scalable, maintainable applications
                    li Apply proven design patterns to real-world scenarios

