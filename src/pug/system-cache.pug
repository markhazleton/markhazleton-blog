extends layouts/modern-layout

block variables
  - var pageTitle = 'System Cache: Enhancing Web API Performance'
  - var pageDescription = 'Learn how to implement system-cached lists for web API performance optimization. Explore memory caching strategies, background refresh patterns, and efficient resource usage in ASP.NET Core.'
  - var pageKeywords = 'System Cache, Web API Performance, Memory Caching, ASP.NET Core, Performance Optimization, Background Refresh, C#, Caching Strategy'
  - var pageCanonical = 'https://markhazleton.com/system-cache.html'

block pagehead
  title= pageTitle + ' | Mark Hazleton'
  meta(name='description', content=pageDescription)
  meta(name='keywords', content=pageKeywords)
  meta(name='author', content='Mark Hazleton')

block og_overrides
  meta(property='og:title', content=pageTitle)
  meta(property='og:description', content=pageDescription)
  meta(property='og:url', content=pageCanonical)
  meta(property='og:type', content='article')

block twitter_overrides
  meta(name='twitter:card', content='summary_large_image')
  meta(name='twitter:title', content=pageTitle)
  meta(name='twitter:description', content=pageDescription)

block canonical
  link(rel='canonical', href=pageCanonical)

block layout-content
  // Hero Section
  section.bg-gradient-primary.py-5
    .container
      .row.align-items-center
        .col-lg-10.mx-auto.text-center
          h1.display-4.fw-bold.mb-3
            i.bi.bi-speedometer2.me-3
            | System Cache Performance
          h2.h3.mb-4 Enhancing Web API Performance with Smart Caching
          p.lead.mb-5.
            Discover how to implement system-cached lists that deliver sub-second response times
            for high-traffic APIs while maintaining data freshness and system efficiency.

  // Main Article
  article#main-article
    .container
      .row
        .col-lg-8.mx-auto
          header.mb-5
            .article-meta.text-muted.mb-4
              time(datetime='2025-01-15') January 15, 2025
              span.mx-2 •
              span 10 min read
              span.mx-2 •
              span by Mark Hazleton

          .article-content
            p.lead.
              In the world of web development, performance optimization is a critical aspect
              that directly influences user experience and overall system efficiency.
              Caching is a technique that helps to mitigate the load on backend services,
              reducing response times and enhancing the user experience.
              One particular approach, the System Cached List, offers a smart and efficient way
              to cache data and deliver it seamlessly to users.

            // Table of Contents
            nav.mb-5(aria-label='Table of Contents')
              .card
                .card-header.bg-primary.text-white
                  h3.mb-0
                    i.bi.bi-list-ul.me-2
                    | Contents
                .card-body
                  ol.list-group.list-group-numbered.list-group-flush
                    li.list-group-item
                      a.text-decoration-none(href='#challenge') The Performance Challenge
                    li.list-group-item
                      a.text-decoration-none(href='#strategy') Caching Strategy
                    li.list-group-item
                      a.text-decoration-none(href='#understanding') Understanding System Cached Lists
                    li.list-group-item
                      a.text-decoration-none(href='#advantages') Advantages
                    li.list-group-item
                      a.text-decoration-none(href='#disadvantages') Disadvantages
                    li.list-group-item
                      a.text-decoration-none(href='#implementation') Implementation
                    li.list-group-item
                      a.text-decoration-none(href='#conclusion') Conclusion

            // Challenge Section
            section#challenge.mb-5
              .card.border-0.shadow-sm
                .card-header.bg-danger.text-white
                  h2.card-title.mb-0
                    i.bi.bi-exclamation-triangle.me-2
                    | The Challenge: Sub-Second Response Times for a Weather API
                .card-body
                  .alert.alert-warning
                    h5.alert-heading
                      i.bi.bi-clock.me-2
                      | Performance Requirements
                    blockquote.mb-0.
                      You're running a Web API that provides weather forecasts to a large number of users.
                      Each forecast request takes approximately 10 seconds to complete.
                      Your consumers expect near-instantaneous responses and your API is handling
                      thousands of hits every minute.

            // Strategy Section
            section#strategy.mb-5
              .card.border-0.shadow-sm
                .card-header.bg-success.text-white
                  h2.card-title.mb-0
                    i.bi.bi-diagram-3.me-2
                    | Caching Strategy
                .card-body
                  .row.g-4
                    .col-md-4
                      .card.h-100.border-info
                        .card-header.bg-info.text-white
                          h4.mb-0
                            i.bi.bi-download.me-2
                            | Data Retrieval
                        .card-body
                          ul.list-unstyled.mb-0
                            li.mb-2
                              i.bi.bi-check-circle.text-success.me-2
                              | Check cache for existing data
                            li.mb-0
                              i.bi.bi-check-circle.text-success.me-2
                              | Serve cached data directly

                    .col-md-4
                      .card.h-100.border-warning
                        .card-header.bg-warning.text-dark
                          h4.mb-0
                            i.bi.bi-x-circle.me-2
                            | Cache Miss
                        .card-body
                          ul.list-unstyled.mb-0
                            li.mb-2
                              i.bi.bi-arrow-right.text-primary.me-2
                              | Wait for data if cache empty
                            li.mb-0
                              i.bi.bi-arrow-right.text-primary.me-2
                              | Serve stale data if past refresh time

                    .col-md-4
                      .card.h-100.border-secondary
                        .card-header.bg-secondary.text-white
                          h4.mb-0
                            i.bi.bi-arrow-repeat.me-2
                            | Background Refresh
                        .card-body
                          ul.list-unstyled.mb-0
                            li.mb-2
                              i.bi.bi-gear.text-info.me-2
                              | Asynchronous cache refresh
                            li.mb-2
                              i.bi.bi-gear.text-info.me-2
                              | Non-blocking main thread
                            li.mb-0
                              i.bi.bi-gear.text-info.me-2
                              | Single refresh process control

            // Understanding Section
            section#understanding.mb-5
              .card.border-0.shadow-sm
                .card-header.bg-info.text-white
                  h2.card-title.mb-0
                    i.bi.bi-lightbulb.me-2
                    | Understanding the System Cached List
                .card-body
                  p.
                    The System Cached List is a caching mechanism that maintains a cached dataset,
                    periodically updating it while ensuring minimal impact on the application's performance.
                    This technique employs the power of the MemoryCache class and a custom CachedData class
                    to manage cached data efficiently.

                  .alert.alert-info
                    h5.alert-heading
                      i.bi.bi-github.me-2
                      | Sample Implementation
                    p.mb-0.
                      I used a minimal Api sample project to start this solution. I then added a
                      generic implementation of caching a list of T using system memory as the caching mechanism.
                      You can view the source for this article in my
                      a.text-decoration-none(href='https://github.com/markhazleton/sandbox/tree/main/WebApiCache' target='_blank' rel='noopener noreferrer') sandbox repository on GitHub
                      | .

            // Advantages Section
            section#advantages.mb-5
              .card.border-0.shadow-sm
                .card-header.bg-success.text-white
                  h2.card-title.mb-0
                    i.bi.bi-plus-circle.me-2
                    | Advantages of the System Cached List
                .card-body
                  .row.g-4
                    .col-md-6
                      .card.h-100.border-light
                        .card-header.bg-light
                          h5.mb-0
                            i.bi.bi-speedometer2.me-2
                            | Improved Performance
                        .card-body
                          p.card-text.
                            Significantly improves performance by reducing backend load.
                            Cached data provides faster response times and smoother user experience.

                    .col-md-6
                      .card.h-100.border-light
                        .card-header.bg-light
                          h5.mb-0
                            i.bi.bi-clock-history.me-2
                            | Reduced Latency
                        .card-body
                          p.card-text.
                            With cached data readily available, there's notable latency reduction.
                            Users experience quicker load times and higher satisfaction levels.

                    .col-md-6
                      .card.h-100.border-light
                        .card-header.bg-light
                          h5.mb-0
                            i.bi.bi-cpu.me-2
                            | Efficient Resource Usage
                        .card-body
                          p.card-text.
                            Memory caching optimizes resource usage and reduces database queries,
                            leading to lower resource consumption.

                    .col-md-6
                      .card.h-100.border-light
                        .card-header.bg-light
                          h5.mb-0
                            i.bi.bi-sliders.me-2
                            | Customizability
                        .card-body
                          p.card-text.
                            Allows customization of cache expiration times based on data volatility,
                            ensuring freshness while avoiding unnecessary updates.

                    .col-md-6
                      .card.h-100.border-light
                        .card-header.bg-light
                          h5.mb-0
                            i.bi.bi-shield-check.me-2
                            | Concurrency Handling
                        .card-body
                          p.card-text.
                            Synchronization locks prevent concurrency issues during cache updates,
                            ensuring data integrity with single-threaded updates.

                    .col-md-6
                      .card.h-100.border-light
                        .card-header.bg-light
                          h5.mb-0
                            i.bi.bi-arrow-up-right.me-2
                            | Graceful Updates
                        .card-body
                          p.card-text.
                            Smart asynchronous update process avoids blocking the application,
                            maintaining responsive user interactions.

            // Disadvantages Section
            section#disadvantages.mb-5
              .card.border-0.shadow-sm
                .card-header.bg-warning.text-dark
                  h2.card-title.mb-0
                    i.bi.bi-exclamation-triangle.me-2
                    | Disadvantages of the System Cached List
                .card-body
                  .row.g-4
                    .col-md-6
                      .card.h-100.border-danger
                        .card-header.bg-danger.text-white
                          h5.mb-0
                            i.bi.bi-clock-history.me-2
                            | Stale Data Risk
                        .card-body
                          p.card-text.
                            Risk of serving outdated information if cache expiration settings
                            are not properly configured or updates are delayed.

                    .col-md-6
                      .card.h-100.border-warning
                        .card-header.bg-warning.text-dark
                          h5.mb-0
                            i.bi.bi-gear-wide-connected.me-2
                            | Increased Complexity
                        .card-body
                          p.card-text.
                            Requires careful consideration of thread safety, cache management,
                            and update scheduling, potentially leading to maintenance challenges.

                    .col-md-6
                      .card.h-100.border-info
                        .card-header.bg-info.text-white
                          h5.mb-0
                            i.bi.bi-memory.me-2
                            | Memory Usage
                        .card-body
                          p.card-text.
                            Large datasets in memory can increase consumption,
                            potentially affecting overall system performance.

                    .col-md-6
                      .card.h-100.border-secondary
                        .card-header.bg-secondary.text-white
                          h5.mb-0
                            i.bi.bi-thermometer-half.me-2
                            | Cold Start Overhead
                        .card-body
                          p.card-text.
                            Initial cache population creates slight overhead during application
                            start or cache expiration, momentarily impacting user experience.            // Implementation Section
            section#implementation.mb-5
              .card.border-0.shadow-sm
                .card-header.bg-dark.text-white
                  h2.card-title.mb-0
                    i.bi.bi-code-slash.me-2
                    | Implementing the System Cached List
                .card-body
                  p.lead.
                    The implementation showcases two primary components that work together to provide
                    efficient memory caching with smart update strategies.

                  // CachedData Class Section
                  .card.mb-4.border-primary
                    .card-header.bg-primary.text-white
                      h3.card-title.mb-0
                        i.bi.bi-braces.me-2
                        | CachedData Class
                    .card-body
                      p.
                        This class encapsulates the cached data along with metadata such as the last update time
                        and the expected next update time, providing a complete picture of cache state.

                      pre.language-csharp
                        code.language-csharp.
                          class CachedData
                          {
                            public DateTime LastUpdated { get; set; }
                            public DateTime NextUpdate { get; set; }
                            public object Data { get; set; }
                          }

                  // SystemValuesCache Class Section
                  .card.mb-4.border-info
                    .card-header.bg-info.text-white
                      h3.card-title.mb-0
                        i.bi.bi-gear-wide-connected.me-2
                        | SystemValuesCache Class
                    .card-body
                      p.
                        This static class acts as the core of the caching mechanism. It initializes a MemoryCache
                        instance and provides the GetCachedData method to fetch and manage cached data. It also uses
                        a synchronization lock to ensure thread safety.

                      .alert.alert-info.mb-4
                        h5.alert-heading
                          i.bi.bi-lightbulb.me-2
                          | FetchDataFunction Delegate
                        p.mb-2.
                          The GetCachedData method's fetchDataFunction argument plays a crucial role in the functionality.
                          It is a delegate that defines a function responsible for retrieving the data that will be cached.
                        p.mb-0.
                          This callback function performs the actual data retrieval from any data source (database, web API, file)
                          and is asynchronous (Task&lt;List&lt;T&gt;&gt;), allowing non-blocking execution.

                      pre.language-csharp
                        code.language-csharp.
                          public static CachedData&lt;T&gt; GetCachedData&lt;T&gt;(
                            string cacheKey,
                            Func&lt;Task&lt;List&lt;T&gt;&gt;&gt; fetchDataFunction,
                            double cacheTimeInSeconds)
                          {
                            List&lt;T&gt; cachedValues = _cache.Get(cacheKey) as List&lt;T&gt; ?? new List&lt;T&gt;();
                            if (cachedValues.Count == 0 || DateTime.Now - _lastUpdateTime > TimeSpan.FromSeconds(cacheTimeInSeconds))
                            {
                              lock (LockObject)
                              {
                                Task.Run(async () =>
                                {
                                  var data = await fetchDataFunction();
                                  cachedValues.Clear();
                                  cachedValues.AddRange(data);
                                  var cachePolicy = new CacheItemPolicy
                                  {
                                    AbsoluteExpiration = DateTimeOffset.Now.AddSeconds(cacheTimeInSeconds)
                                  };
                                  _cache.Set(cacheKey, cachedValues, cachePolicy);
                                  _lastUpdateTime = DateTime.Now;
                                }).Wait();
                              }
                            }
                            return new CachedData&lt;T&gt;()
                            {
                              Data = cachedValues,
                              LastUpdateTime = _lastUpdateTime,
                              NextUpdateTime = _lastUpdateTime.AddSeconds(cacheTimeInSeconds)
                            };
                          }

            // Conclusion Section
            section#conclusion.mb-5
              .card.border-0.shadow-sm
                .card-header.bg-success.text-white
                  h2.card-title.mb-0
                    i.bi.bi-check-circle.me-2
                    | Conclusion
                .card-body
                  p.lead.
                    The System Cached List provides an effective approach to enhance web application performance
                    by intelligently managing and serving cached data.

                  .row.g-4.mb-4
                    .col-md-6
                      .card.h-100.bg-light
                        .card-body.text-center
                          i.bi.bi-speedometer2.display-6.text-success.mb-3
                          h5.card-title Performance Enhancement
                          p.card-text.
                            Combines memory caching efficiency with smart update strategies for optimal performance.

                    .col-md-6
                      .card.h-100.bg-light
                        .card-body.text-center
                          i.bi.bi-shield-check.display-6.text-primary.mb-3
                          h5.card-title Reduced Backend Load
                          p.card-text.
                            Ensures users receive quick responses while significantly reducing backend resource usage.

                  .alert.alert-warning
                    h5.alert-heading
                      i.bi.bi-exclamation-triangle.me-2
                      | Implementation Considerations
                    p.mb-0.
                      While offering numerous advantages, it's crucial to carefully consider cache expiration times
                      and handle potential complexities to reap the full benefits of this caching technique.
                      Proper configuration and monitoring are essential for optimal results.

