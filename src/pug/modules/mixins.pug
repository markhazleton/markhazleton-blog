mixin renderFooter(links)
  - let groupedLinks = {}
  each link in links
    - if (groupedLinks[link.Section])
      - groupedLinks[link.Section].push(link)
    - else
      - groupedLinks[link.Section] = [link]

  - const sortedSections = Object.keys(groupedLinks).sort()

  each sectionKey in sortedSections
    - const section = sectionKey
    - const links = groupedLinks[sectionKey]
    - links.sort((a, b) => a.name.localeCompare(b.name))

    div.col-12.col-lg-6.col-xl-4
      h3.text-light= section
      ul
        each link in links
          li
            a.text-light(href=`/${link.slug}` target='_self' title=`${link.description}`) #{link.name}

mixin relatedDocuments(articles, currentSlug, lastModified)
  - let currentArticle = articles.find(article => article.slug === currentSlug);
  - let relatedArticles = [];

  // Ensure current article exists
  if currentArticle
    // Extract and clean currentKeywords
    - let currentKeywords = [];
    - if (currentArticle.keywords && currentArticle.keywords.trim())
        - let rawKeywords = currentArticle.keywords.split(',');
        - currentKeywords = rawKeywords.map(keyword => keyword.trim().toLowerCase()).filter(keyword => keyword);

    // Only check for related articles if there are valid keywords
    if currentKeywords.length > 0
      each article in articles
        if article.slug !== currentSlug && article.keywords
          - let articleKeywords = article.keywords.split(',').map(keyword => keyword.trim().toLowerCase());
          - let hasMatchingKeyword = articleKeywords.some(keyword => currentKeywords.includes(keyword));
          if hasMatchingKeyword
            - relatedArticles.push(article);

    // Shuffle related articles and limit to 3
    - relatedArticles = relatedArticles.sort(() => 0.5 - Math.random()).slice(0, 3);

    // Render current article's keywords as badges
    if currentKeywords.length > 0
      div.keywords.mt-3
        p.text-white Hashtags:
        div.d-flex.flex-wrap.gap-2
          each keyword in currentKeywords
            span.badge.bg-primary.text-uppercase #{keyword}

    // Render related articles in a card layout
    if relatedArticles.length > 0
      div.related-articles.mt-4
        h3.text-white Related Articles
        div.row.row-cols-1.row-cols-md-2.row-cols-lg-3.g-4
          each related in relatedArticles
            div.col
              div.card.h-100.bg-dark.text-white
                div.card-body
                  h5.card-title
                    i.bi.bi-arrow-right-circle-fill.me-2
                    a.text-white(href=`/${related.slug}` title=`${related.description}`) #{related.name}
                  p.card-text.text-white #{related.description}
                div.card-footer
    else
      p.mt-4.text-muted

    // Render lastModified as a short date string
    div.mt-4
      p.text-white Last updated: #{lastModified}
  else
    p.text-muted 


mixin displayArticleInfo(article)
  if article
    div.card.bg-light.text-dark.mb-4
      div.card-body
        h5.card-title
          i.bi.bi-file-text.me-2
          | #{article.name}
        p.card-text
          strong Category:
          | #{article.Section}
        if article.lastmod
          p.card-text
            strong Last Updated:
            | #{article.lastmod}
        else
          p.card-text.text-muted Last Updated: Not available
  else
    div.alert.alert-warning(role="alert")
      i.bi.bi-exclamation-triangle-fill.me-2
      | Article data is not available.
