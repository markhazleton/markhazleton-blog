extends layouts/modern-layout.pug

block layout-content
  // Hero Section
  section.bg-gradient-primary.text-white.py-5
    .container
      .row.align-items-center
        .col-lg-8
          br
          h1.display-4.fw-bold.mb-3 Articles & Insights
          p.lead.mb-4 Explore over 90 articles covering software development, Azure cloud solutions, project management, and technology leadership. Learn from real-world experiences and practical insights.
          .d-flex.flex-wrap.gap-2.mb-4
            span.badge.bg-light.text-dark.px-3.py-2 Software Development
            span.badge.bg-light.text-dark.px-3.py-2 Azure Cloud
            span.badge.bg-light.text-dark.px-3.py-2 Project Management
            span.badge.bg-light.text-dark.px-3.py-2 Technology Leadership
        .col-lg-4.text-center
          i.fas.fa-newspaper.display-1.mb-3.opacity-75

  // All Articles Section - Now Primary Content
  section.py-5
    .container
      .text-center.mb-5
        h2.display-5.fw-bold.mb-3 Complete Article Collection
        p.lead.text-muted Filter and browse the complete collection organized by topic

      br
      .row
        .col-lg-3.mb-4
          .card.sticky-top(style='top: 20px;')
            .card-header.bg-primary.text-white
              h5.mb-0
                i.fas.fa-filter.me-2
                | Quick Filters
            .card-body
              #sectionStats
                // Section statistics will be populated by JavaScript

        .col-lg-9
          .row.justify-content-center
            .col-lg-8
              .card.shadow-sm
                .card-body
                  .row.g-3
                    .col-md-8
                      .input-group
                        span.input-group-text
                          i.fas.fa-search
                        input#searchInput.form-control(type='text', placeholder='Search articles by title, keywords, or content...')
                    .col-md-4
                      select#sectionFilter.form-select
                        option(value='') All Sections
                        option(value='Project Mechanics') Project Mechanics
                        option(value='Development') Development
                        option(value='Case Studies') Case Studies
                        option(value='ChatGPT') ChatGPT
                        option(value='PromptSpark') PromptSpark
                        option(value='Data Science') Data Science
                        option(value='Blog Management') Blog Management
                        option(value='ReactSpark') ReactSpark
                        option(value='Open Source') Open Source
                  #searchStats.text-muted.small.mt-2


            #articlesContainer
              // Articles will be populated by JavaScript

            // Pagination
            nav.mt-4(aria-label='Articles pagination')
              #pagination.d-flex.justify-content-center
                // Pagination will be populated by JavaScript

  // Call to Action
  section.bg-primary.text-white.py-5
    .container.text-center
      h2.display-6.fw-bold.mb-3 Stay Updated
      p.lead.mb-4 Follow along for the latest insights on technology, development, and leadership
      .d-flex.justify-content-center.gap-3
        a.btn.btn-light.btn-lg(href='https://www.linkedin.com/in/markhazleton/', target='_blank', rel='noopener')
          i.fab.fa-linkedin.me-2
          | LinkedIn
        a.btn.btn-outline-light.btn-lg(href='https://github.com/markhazleton', target='_blank', rel='noopener')
          i.fab.fa-github.me-2
          | GitHub

block additional_js
  script.
    // Articles data
    let articlesData = [];
    let currentPage = 1;
    const articlesPerPage = 12;
    let filteredArticles = [];    // Load articles from JSON
    async function loadArticles() {
      try {
        const response = await fetch('articles.json');
        articlesData = await response.json();

        // Sort by lastmod date (newest first)
        articlesData.sort((a, b) => new Date(b.lastmod) - new Date(a.lastmod));

        filteredArticles = [...articlesData];

        displaySectionStats();
        displayArticles();
        updateSearchStats();
      } catch (error) {
        console.error('Error loading articles:', error);
        document.getElementById('articlesContainer').innerHTML =
          '<div class="alert alert-danger">Error loading articles. Please try again later.</div>';
      }    }

    // Display section statistics
    function displaySectionStats() {
      const sections = {};
      articlesData.forEach(article => {
        // Ensure article has a Section field
        if (article.Section) {
          sections[article.Section] = (sections[article.Section] || 0) + 1;
        }
      });

      const statsContainer = document.getElementById('sectionStats');
      statsContainer.innerHTML = Object.entries(sections)
        .sort(([,a], [,b]) => b - a)
        .map(([section, count]) => `
          <div class="d-flex justify-content-between align-items-center mb-2">
            <button class="btn btn-sm btn-outline-primary text-start flex-grow-1"
              onclick="filterBySection('${section.replace(/'/g, "\\'")}')">
              ${section}
            </button>
            <span class="badge bg-secondary ms-2">${count}</span>
          </div>
        `).join('');
    }

    // Display articles with pagination
    function displayArticles() {
      const container = document.getElementById('articlesContainer');
      const startIndex = (currentPage - 1) * articlesPerPage;
      const endIndex = startIndex + articlesPerPage;
      const pageArticles = filteredArticles.slice(startIndex, endIndex);

      if (pageArticles.length === 0) {
        container.innerHTML = `
          <div class="text-center py-5">
            <i class="fas fa-search display-1 text-muted mb-3"></i>
            <h3 class="text-muted">No articles found</h3>
            <p class="text-muted">Try adjusting your search criteria</p>
          </div>
        `;
        return;
      }

      container.innerHTML = `
        <div class="row g-4">
          ${pageArticles.map(article => `
            <div class="col-md-6 col-lg-4">
              <div class="card h-100 shadow-sm hover-card">
                <div class="card-body d-flex flex-column">
                  <div class="mb-2">
                    <span class="badge bg-secondary">${article.Section}</span>
                    <small class="text-muted ms-2">${formatDate(article.lastmod)}</small>
                  </div>
                  <h6 class="card-title">${article.name}</h6>
                  <p class="card-text text-muted small flex-grow-1">${truncateText(article.description, 100)}</p>
                  <a href="${article.slug}" class="btn btn-sm btn-outline-primary">Read Article</a>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;

      displayPagination();
    }    // Display pagination
    function displayPagination() {
      const totalPages = Math.ceil(filteredArticles.length / articlesPerPage);
      const paginationContainer = document.getElementById('pagination');

      if (totalPages <= 1) {
        paginationContainer.innerHTML = '';
        return;
      }

      let paginationHTML = '<ul class="pagination">';

      // Previous button
      paginationHTML += `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
          <button class="page-link" onclick="changePage(${currentPage - 1})" aria-label="Previous" ${currentPage === 1 ? 'disabled' : ''}>
            <span aria-hidden="true">&laquo;</span>
          </button>
        </li>
      `;

      // Page numbers
      const startPage = Math.max(1, currentPage - 2);
      const endPage = Math.min(totalPages, currentPage + 2);

      if (startPage > 1) {
        paginationHTML += `<li class="page-item"><button class="page-link" onclick="changePage(1)">1</button></li>`;
        if (startPage > 2) {
          paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        paginationHTML += `
          <li class="page-item ${i === currentPage ? 'active' : ''}">
            <button class="page-link" onclick="changePage(${i})" ${i === currentPage ? 'aria-current="page"' : ''}>${i}</button>
          </li>
        `;
      }

      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
        paginationHTML += `<li class="page-item"><button class="page-link" onclick="changePage(${totalPages})">${totalPages}</button></li>`;
      }

      // Next button
      paginationHTML += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
          <button class="page-link" onclick="changePage(${currentPage + 1})" aria-label="Next" ${currentPage === totalPages ? 'disabled' : ''}>
            <span aria-hidden="true">&raquo;</span>
          </button>
        </li>
      `;

      paginationHTML += '</ul>';
      paginationContainer.innerHTML = paginationHTML;
    }    // Change page
    function changePage(page) {
      if (page < 1 || page > Math.ceil(filteredArticles.length / articlesPerPage)) return;

      // Store current scroll position relative to articles container
      const articlesContainer = document.getElementById('articlesContainer');
      const containerTop = articlesContainer.offsetTop;

      currentPage = page;
      displayArticles();

      // Smooth scroll to articles container without jumping to top
      window.scrollTo({
        top: containerTop - 100, // Offset for fixed navbar
        behavior: 'smooth'
      });
    }// Filter articles
    function filterArticles() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const sectionFilter = document.getElementById('sectionFilter').value;
      filteredArticles = articlesData.filter(article => {
        // Ensure all fields exist and are strings before searching
        const name = (article.name || '').toLowerCase();
        const description = (article.description || '').toLowerCase();
        const keywords = (article.keywords || '').toLowerCase();
        const section = (article.Section || '').toLowerCase();

        const matchesSearch = !searchTerm ||
          name.includes(searchTerm) ||
          description.includes(searchTerm) ||
          keywords.includes(searchTerm) ||
          section.includes(searchTerm);

        const matchesSection = !sectionFilter || article.Section === sectionFilter;        return matchesSearch && matchesSection;
      });

      currentPage = 1;
      displayArticles();
      updateSearchStats();
    }    // Filter by section
    function filterBySection(section) {
      document.getElementById('sectionFilter').value = section;
      document.getElementById('searchInput').value = '';
      filterArticles();

      // Scroll to articles section
      document.getElementById('articlesContainer').scrollIntoView({ behavior: 'smooth' });
    }

    // Update search statistics
    function updateSearchStats() {
      const statsElement = document.getElementById('searchStats');
      const total = articlesData.length;
      const filtered = filteredArticles.length;

      if (filtered === total) {
        statsElement.textContent = `Showing all ${total} articles`;
      } else {
        statsElement.textContent = `Showing ${filtered} of ${total} articles`;
      }
    }

    // Utility functions
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    }

    function truncateText(text, maxLength) {
      if (!text || text.length <= maxLength) return text || '';
      return text.substring(0, maxLength) + '...';
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function() {
      loadArticles();

      // Search functionality
      const searchInput = document.getElementById('searchInput');
      const sectionFilter = document.getElementById('sectionFilter');

      let searchTimeout;
      searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(filterArticles, 300);
      });

      sectionFilter.addEventListener('change', filterArticles);
    });
  // Add hover effects CSS
  style.
    .hover-card {
      transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    .hover-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }
    .bg-gradient-primary {
      background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    }
    .card-img-wrapper {
      position: relative;
      overflow: hidden;
    }
    .card-img-wrapper img {
      transition: transform 0.3s ease;
    }
    .hover-card:hover .card-img-wrapper img {
      transform: scale(1.05);
    }
    .pagination .page-link {
      border: none;
      background: none;
      padding: 0.5rem 0.75rem;
      cursor: pointer;
    }
    .pagination .page-link:hover:not(:disabled) {
      background-color: #e9ecef;
      border-color: #dee2e6;
    }
    .pagination .page-item.active .page-link {
      background-color: #0d6efd;
      border-color: #0d6efd;
      color: white;
    }
    .pagination .page-link:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    @media (max-width: 768px) {
      .display-4 {
        font-size: 2.5rem;
      }
      .display-5 {
        font-size: 2rem;
      }
    }
