extends layouts/articles

block pagehead
  title CancellationToken for Efficient Asynchronous Programming
  meta(name='description' content='Explore the effective use of CancellationToken in C# for managing asynchronous programming. Understand how to implement cancellations efficiently in .NET applications.')
  meta(name='keywords' content='CancellationToken, Asynchronous Programming, C#, .NET, Task Cancellation, Efficient Coding, Software Development, .NET Asynchronous Techniques')
  meta(name='author' content='Mark Hazleton')

  link(rel='canonical', href='https://markhazleton.controlorigins.com/cancellation-token.html')

  meta(property='og:title' content='Harnessing the Power of CancellationToken for Efficient Asynchronous Programming')
  meta(property='og:description' content='Discover the nuances of CancellationToken in C# for optimal asynchronous programming. A comprehensive guide for .NET developers.')
  meta(property='og:image' content='assets/img/Cancellation-Token.png')
  meta(property='og:url' content='https://markhazleton.controlorigins.com/cancellation-token.html')
  meta(property='og:type' content='article')
  meta(property='og:site_name' content='Mark Hazleton')
  meta(name='twitter:card' content='summary_large_image')
  meta(name='twitter:title' content='Harnessing the Power of CancellationToken for Efficient Asynchronous Programming')
  meta(name='twitter:description' content='Explore CancellationToken in C# for managing asynchronous tasks effectively. Essential insights for .NET developers.')
  meta(name='twitter:image' content='assets/img/Cancellation-Token.png')
  meta(name='twitter:site' content='@markhazleton')
  meta(name='twitter:creator' content='@markhazleton')




block layout-content

  section#post.painteddesert-section.painteddesert-section-background
    .painteddesert-section-content
      h1.mb-0 Cancellation Token
      .subheading.mb-3 Harnessing the Power of CancellationToken for Efficient and Safe Asynchronous Programming
      p.lead.
        Asynchronous programming can be challenging, especially when it comes to managing long-running operations or
        dealing with unpredictable user interactions.   It is crucial to handle cancellations gracefully to ensure that the
        application remains responsive and doesn't waste resources on abandoned work.  One of the techniques for efficiently
        and safely managing these scenarios is the use of the <strong>'CancellationToken'</strong> class.
        By accepting a CancellationToken as a parameter,
        a method can be notified when the caller is no longer interested in the result and can gracefully cancel its work.
      p.
        A <strong>'CancellationToken'</strong> is an object that allows you to communicate the cancellation status to an asynchronous operation.
        It's a way of telling an operation to stop executing if it's no longer needed. For example,
        if a user cancels a search operation in a web application, you can use a <strong>'CancellationToken'</strong> instance to signal
        to the server to stop processing the request.
      p.
        One way to use a <strong>'CancellationToken'</strong> is with the Task class in C#. The Task class represents an asynchronous
        operation that can be canceled using a <strong>'CancellationToken'</strong>. To use it, you simply pass a <strong>'CancellationToken'</strong>
        to the Task.Run method, which runs the operation asynchronously.
      p.
        The following code snippet shows how to use a <strong>'CancellationToken'</strong> with the Task class:

      pre.code.
        public async Task DownloadFileAsync(string url,
          string filename,
          HttpClient client,
          CancellationToken cancellationToken)
        {
          await client.DownloadFileTaskAsync(url, filename, cancellationToken);
        }

      p.
        In this example, the DownloadFileAsync method takes a URL and a filename as input,
        along with a <strong>'CancellationToken'</strong>. It accepts an instance of the HttpClient class,
        which is used to download the file. The DownloadFileTaskAsync method is called on
        the client object, passing in the URL, filename, and cancellationToken.
        If the <strong>'CancellationToken'</strong> is canceled before the download is complete, the Task will be canceled.
      p.
        By using a <strong>'CancellationToken'</strong>, you can make your code more responsive to the requestor.
        Most asynchronous libraries allow for the passing of the <strong>'CancellationToken'</strong> in their methods.

      h2 Checking For Cancellation
      p.
        When you're writing asynchronous code, it's important to handle cancellation gracefully.
        This is especially true when you're dealing with long-running operations or unpredictable user interactions.
        One way to handle cancellation is by using a CancellationToken.
        A CancellationToken is an object that allows the requesting code to signal a cancellation of an asynchronous operation.
        It's a way of telling an operation to stop executing if it's no longer needed.  In your code, you can use
        a CancellationToken to signal to the server to stop processing the request.
        You can call the <strong>'ThrowIfCancellationRequested()'</strong> method
        to check if the CancellationToken has been canceled and throw an exception if it has.
        Determining where in your business logic to place the call to <strong>'ThrowIfCancellationRequested()'</strong>
        can be a crucial decision
        to ensure efficient and safe asynchronous programming.
      p.
        First, you need to identify the points in your code where cancellation is allowed.
        This could include inside loops, I/O operations, and any long-running or expensive operations.
        Once you have identified these critical points, you should determine how you want to handle cancellation
        at each point. For example, you may choose to cancel and abort an operation immediately or allow it to complete gracefully.
      p.
        Next, you should consider the granularity of cancellation. It's important to strike a balance between being too
        granular and being too coarse. If you're too granular, you risk overhead from multiple cancellation requests
        that occur in quick succession. On the other hand, if you're too coarse, you may not be able to
        cancel the operation at the desired point.
      p.
        After deciding on the granularity of cancellation, you should then decide where in your business logic to place
        the call to <strong>'ThrowIfCancellationRequested()'</strong>.
        Ideally, you should place it in a way that ensures cancellation occurs
        as close to the critical point as possible while still providing sufficient time for cleanup and graceful shutdown.

      pre.code.
        public async Task DownloadFileAsync(list&lt;string&gt; urls,
          string filename,
          HttpClient client,
          CancellationToken cancellationToken)
          {
            try {
              foreach (var url in urls)
              {
                // Check for cancellation before each download
                cancellationToken.ThrowIfCancellationRequested();
                await client.DownloadFileTaskAsync(url, filename, cancellationToken);
              }
            }
            catch (TaskCanceledException ex)
            {
              // Handle cancellation thronw by client.DownloadFileTaskAsync() here
            }
            catch (OperationCanceledException ex)
            {
              // Handle cancellation thronw by ThrowIfCancellationRequested() here
            }
          }


      p.
        Overall, careful consideration of where to place the call to <strong>'ThrowIfCancellationRequested()'</strong> in your business logic
        is critical to ensure efficient and safe asynchronous programming.  Keep in mind that calling the
        <strong>'ThrowIfCancellationRequested()'</strong> method only checks if the cancellation has been requested and throws
        an exception of type OperationCanceledException if necessary.
        This method does not change the state of the cancellation token.
      p.
        It's also worth noting that if you need to check the state of the cancellation token without
        throwing an exception, you can use the IsCancellationRequested property.
        This property returns a boolean value indicating whether cancellation has been requested for the token.
      p.
        It is important to consider the consequences of cancellation, especially in long-running
        or expensive operations. You should ensure that any resources acquired during the operation are properly
        released and any partial results are correctly handled in the event of a cancellation.
      p.
        In general, it's important to understand the behavior of CancellationToken and related classes when
        writing asynchronous code. By following best practices like propagating cancellation tokens and
        handling cancellation exceptions properly, you can write robust and reliable asynchronous code
        that can respond appropriately to user or system requests for cancellation.
      p.
        If you're looking for more in-depth examples of how to use CancellationToken and other
        asynchronous techniques in .NET, you may want to check out the AsyncDemo repository on GitHub,
        which contains sample code and projects that demonstrate these concepts in action.
      p.
        Check for cancellation after the "point of no cancellation": If your method has already incurred
        side effects that can't be reverted, it's essential to ensure that canceling the operation won't
        leave the application in an inconsistent state. If the cancellation token is signaled,
        you should only cancel the operation when you can do so, leaving objects in a valid state.
        This may require you to finish a large amount of work, undo previous work, or find a
        convenient place to stop before throwing OperationCanceledException.
      p.
        Pass the CancellationToken to all methods: Propagate the CancellationToken to all the methods
        you call that accept one, except after the point of no cancellation. This ensures that every
        method involved in the operation can respond appropriately to cancellation requests.
      p.
        Handle exceptions thrown when an operation or task is canceled: When a cancellation is requested,
        the operation or task may throw an OperationCanceledException or TaskCanceledException.
        It's important to catch these exceptions and handle them appropriately.
        To ensure that you catch all cancellation exceptions, catch OperationCanceledException instead of TaskCanceledException.
      h2 Sample Code:
      p.
        For more complete coding examples of asynchronous techniques in .NET, check out
        <a href='https://github.com/markhazleton/AsyncDemo' target='_blank'  rel='noopener'>AsyncDemo</a> repository on GitHub.
        This repository, developed by Mark Hazleton, provides a wide range of examples of how to use CancellationToken
        and other asynchronous programming techniques in a safe and efficient manner.
      h2 Conclusion:
      p.
        By following best practices for handling cancellations in asynchronous programming,
        you can ensure that your application remains responsive, efficient, and free from errors
        caused by abandoned work. Use CancellationToken to gracefully handle cancellations,
        pass it to all methods involved in the operation, and handle exceptions thrown when an operation
        or task is canceled. With these practices in place, you can write reliable and efficient asynchronous code.

      h2.mb-0 Related Articles
      ul
        li
          a(href='https://markhazleton.controlorigins.com/decorator-pattern-http-client.html') Decorator Pattern with HttpClient
          p Brief description of how CancellationToken is used with HttpClient and the Decorator Design Pattern.
        li
          a(href='https://knowyourtoolset.com/2023/05/cancellation-tokens/') Cancellation Tokens in ASP.NET APIs (Erik Dahl)
          p Overview of implementing CancellationToken in ASP.NET APIs.
        li
          a(href='https://andrewlock.net/cancellation-tokens-in-mvc-core-controllers/') Cancellation Tokens in MVC Core Controllers
          p Insights into the use of CancellationToken in MVC Core Controllers.
        li
          a(href='https://medium.com/deep-dive-into-csharp-cancellation-tokens') Deep Dive into C# Cancellation Tokens
          p Comprehensive guide on Cancellation Tokens in C#.
        li
          a(href='https://devblogs.microsoft.com/recommended-patterns-for-cancellation-tokens/') Recommended Patterns for Cancellation Tokens
          p Discussing best practices and patterns for effective use of CancellationToken.
        li <a href='https://docs.microsoft.com/en-us/dotnet/standard/threading/cancellation-in-managed-threads' target='_blank'  rel='noopener'>Cancellation in Managed Threads</a>
