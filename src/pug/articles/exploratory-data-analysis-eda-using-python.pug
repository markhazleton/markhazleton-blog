extends ../layouts/modern-layout

block layout-content
  .container.py-4
    .row.justify-content-center
      .col-12.col-lg-10
        article
          header.text-center.mb-5
            h1.display-4.fw-bold.text-primary Exploratory Data Analysis (EDA)
            p.lead.text-muted.mb-0 A comprehensive guide to data sanity checks and EDA using Python          // Embedded YouTube Video Card
          .card.mb-5.shadow-sm
            .card-header.bg-primary.text-white
              h5.card-title.mb-0
                i.bi.bi-play-circle.me-2(aria-hidden='true')
                | Exploratory Data Analysis (EDA) in Python – Video Guide
            .card-body
              .ratio.ratio-16x9
                iframe(
                  src="https://www.youtube.com/embed/3KO0GuTkPew?si=8lRQ25ujRZOpquR_"
                  title="Exploratory Data Analysis (EDA) in Python – YouTube Video"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                  allowfullscreen
                )
            .card-footer.bg-light
              p.card-text.mb-0
                | Watch this video for a step-by-step walkthrough of EDA in Python, including practical code demonstrations and tips for effective data analysis.          // Table of Contents
          .card.mb-5.shadow-sm
            .card-header.bg-secondary.text-white
              h3.card-title.mb-0
                i.bi.bi-list-ul.me-2(aria-hidden='true')
                | Table of Contents
            .card-body
              .list-group.list-group-flush
                a.list-group-item.list-group-item-action(href='#understanding-the-dataset')
                  i.bi.bi-chevron-right.me-2(aria-hidden='true')
                  | Understanding the Dataset
                a.list-group-item.list-group-item-action(href='#data-sanity-checks')
                  i.bi.bi-chevron-right.me-2(aria-hidden='true')
                  | Data Sanity Checks
                a.list-group-item.list-group-item-action(href='#exploratory-data-analysis-eda')
                  i.bi.bi-chevron-right.me-2(aria-hidden='true')
                  | Exploratory Data Analysis (EDA)
                a.list-group-item.list-group-item-action(href='#plan-for-data-cleaning-and-preprocessing')
                  i.bi.bi-chevron-right.me-2(aria-hidden='true')
                  | Plan for Data Cleaning and Preprocessing
                a.list-group-item.list-group-item-action(href='#conclusion')
                  i.bi.bi-chevron-right.me-2(aria-hidden='true')
                  | Conclusion
                a.list-group-item.list-group-item-action(href='#eda-faq')
                  i.bi.bi-chevron-right.me-2(aria-hidden='true')
                  | EDA FAQ
                a.list-group-item.list-group-item-action(href='#summary')
                  i.bi.bi-chevron-right.me-2(aria-hidden='true')
                  | Summary Checklist
                a.list-group-item.list-group-item-action(href='#glossary')
                  i.bi.bi-chevron-right.me-2(aria-hidden='true')
                  | Glossary
          // Introduction Section
          .card.mb-5.shadow-sm
            .card-body
              .row
                .col-lg-8
                  p.lead
                    | Before venturing into advanced data analysis or machine learning,
                    | it's essential to ensure that the data you're working with is clean and coherent.
                    | This article outlines the process of conducting Data Sanity checks and Exploratory Data Analysis (EDA),
                    | both of which are critical first steps in understanding your dataset.
                  p
                    | While the initial stages don't involve modifying the data, these actions help uncover potential issues
                    | such as missing values, duplicates, and outliers, while providing valuable insights into the data's structure and relationships.
                  p
                    | It's important to start by inspecting the dataset to familiarize yourself with its contents and structure.
                    | Understanding the data is key to identifying any problems that might affect your analysis.
                    | Once this preliminary examination is complete, you can decide whether data cleaning or preprocessing is needed.
                .col-lg-4
                  .bg-light.p-3.rounded
                    h5.text-primary
                      i.bi.bi-info-circle.me-2(aria-hidden='true')
                      | Key Focus Areas
                    ul.list-unstyled.mb-0
                      li
                        i.bi.bi-check-circle.text-success.me-2(aria-hidden='true')
                        | Data sanity checks
                      li
                        i.bi.bi-check-circle.text-success.me-2(aria-hidden='true')
                        | Exploratory data analysis
                      li
                        i.bi.bi-check-circle.text-success.me-2(aria-hidden='true')
                        | Missing value detection
                      li
                        i.bi.bi-check-circle.text-success.me-2(aria-hidden='true')
                        | Outlier identification

          // Dataset Context Section
          .card.mb-5.shadow-sm
            .card-header.bg-info.text-white
              h4.card-title.mb-0
                i.bi.bi-database.me-2(aria-hidden='true')
                | Dataset Context
            .card-body
              p
                | Recently, I worked with a nutritional dataset from Kaggle using Google Colab,
                | which allows for writing and executing Python code in a browser-based Jupyter notebook.
                | The objective was to analyze nutrient patterns across a range of foods and categorize
                | them based on their nutrient content.
              p
                | Kaggle is a fantastic resource for data scientists and enthusiasts,
                | offering a wealth of datasets across different fields.
                | Whether you're looking to explore healthcare, finance, or more specialized areas like nutrition,
                | Kaggle provides an excellent platform to practice data analysis and machine learning techniques.
              .alert.alert-info.mb-0
                p.mb-2
                  strong
                    i.bi.bi-lightbulb.me-2(aria-hidden='true')
                    | Dataset Details:
                p.mb-0
                  | The dataset I explored included nutritional values for various
                  | foods and products, detailing their protein, fat, vitamin C, and fiber content.
                  | You can find the full code and analysis in my
                  a.alert-link(href='https://drive.google.com/drive/folders/1cF49bLIgTwHMNwo7TxSjMw_8m-yw2cBg?usp=sharing' target="_blank" rel="nofollow noopener noreferrer" title="Google Drive Folder with Code and Analysis") Google Drive folder.

      p.
        By conducting thorough data sanity checks and EDA, we lay a strong foundation for further analysis.
        With a clear understanding of the data, the next steps could include feature engineering, advanced visualizations, or machine learning.
      .card
        .card-header
          h3.card-title Automating Univariate and Bivariate Analysis in Python
        .card-body
          p.lead.
            During your Data Sanity checks, it's essential to classify your variables
            into numerical, categorical, and dependent types before starting your
            Exploratory Data Analysis (EDA).
          p.
            In the early stages of data analysis,
            you will often need to determine whether your variables are numerical, categorical, or dependent.
            Identifying these is crucial for:
          ul
            li Performing the correct statistical methods on your data
            li Automating your exploratory analysis using scripts
            li Generating meaningful insights into relationships between features
          p.
            Once these variables are classified,
            you can begin the process of performing univariate (analyzing one variable)
            and bivariate (analyzing relationships between two variables) analysis.
            Automating this process will save you time and ensure consistency in your Exploratory Data Analysis (EDA).
          h4.mb-4 Automating Univariate Analysis for Numerical and Categorical Features
          p.
            In univariate analysis, you focus on understanding the distribution of a single feature.
            The following Python functions allow you to automate this process for both numerical and categorical features.
          p.
            This function calculates the key statistical attributes for a numerical feature,
            including mean, median, variance, and skewness.
            It also provides visual insights using KDE plots, BoxPlots, and Histograms.
          p Here's the full implementation of the function:

          pre.language-python
            code.language-python.
              def univariate_analysis(df, features):
                for feature in features:
                  skewness = df[feature].skew()
                  minimum = df[feature].min()
                  maximum = df[feature].max()
                  mean = df[feature].mean()
                  mode = df[feature].mode().values[0]
                  unique_count = df[feature].nunique()
                  variance = df[feature].var()
                  std_dev = df[feature].std()
                  percentile_25 = df[feature].quantile(0.25)
                  median = df[feature].median()
                  percentile_75 = df[feature].quantile(0.75)
                  data_range = maximum - minimum

                  print(f"Univariate Analysis for {feature}")
                  print(f"Skewness: {skewness:.4f}")
                  print(f"Min: {minimum}")
                  print(f"Max: {maximum}")
                  print(f"Mean: {mean:.4f}")
                  print(f"Mode: {mode}")
                  print(f"Unique Count: {unique_count}")
                  print(f"Variance: {variance:.4f}")
                  print(f"Std Dev: {std_dev:.4f}")
                  print(f"25th Percentile: {percentile_25}")
                  print(f"Median (50th Pct): {median}")
                  print(f"75th Percentile: {percentile_75}")
                  print(f"Range: {data_range}")

                  plt.figure(figsize=(18, 6))
                  plt.subplot(1, 3, 1)
                  sns.kdeplot(df[feature], fill=True)
                  plt.title(f"KDE of {feature}")
                  plt.subplot(1, 3, 2)
                  sns.boxplot(df[feature])
                  plt.title(f"Box Plot of {feature}")
                  plt.subplot(1, 3, 3)
                  sns.histplot(df[feature], bins=10, kde=True)
                  plt.title(f"Histogram of {feature}")
                  plt.tight_layout()
                  plt.show()

          p This function provides a comprehensive analysis for each numerical feature by calculating statistical attributes and generating KDE, BoxPlot, and Histogram visualizations.

          h4.mb-3 Categorical Univariate Analysis
          p For categorical features, we analyze the distribution of categories and their relationship with the dependent feature. Here's a function that automates this process:

          pre.language-python
            code.language-python.
              def univariate_analysis_categorical(df, categorical_features):
                for feature in categorical_features:
                  unique_categories = df[feature].nunique()
                  mode = df[feature].mode().values[0]
                  mode_freq = df[feature].value_counts().max()
                  category_counts = df[feature].value_counts()
                  category_percent = df[feature].value_counts(normalize=True) * 100
                  missing_values = df[feature].isnull().sum()
                  total_values = len(df[feature])
                  imbalance_ratio = category_counts.max() / total_values

                  print(f"Univariate Analysis for {feature}")
                  print(f"Unique Categories: {unique_categories}")
                  print(f"Mode (Most frequent): {mode}")
                  print(f"Frequency of Mode: {mode_freq}")
                  print(f"Missing Values: {missing_values}")
                  print(f"Imbalance Ratio (Max/Total): {imbalance_ratio:.4f}")
                  print(f"Category Counts:\n{category_counts}")

                  plt.figure(figsize=(10, 6))
                  sns.countplot(x=df[feature], order=df[feature].value_counts().index)
                  plt.title(f"Frequency of {feature} Categories")
                  plt.xlabel(feature)
                  plt.ylabel("Count")
                  plt.tight_layout()
                  plt.show()

          p.
            This function provides a clear understanding of how categories are distributed
            across the data and helps identify potential imbalances.

          h4.mb-4 Automating Bivariate Analysis
          p.
            Bivariate analysis allows you to understand the relationship between two variables.
            Here's how you can automate this process.
          p.
            The following function calculates key attributes for a numerical feature in relation
            to a boolean dependent feature.
            It prints out key insights and generates side-by-side visualizations to understand their relationship.

          pre.language-python
            code.language-python.
              def bivariate_analysis(df, numerical_features, categorical_features, dependent_feature):
                if numerical_features:
                  for feature in numerical_features:
                    mean_0 = df[df[dependent_feature] == 0][feature].mean()
                    mean_1 = df[df[dependent_feature] == 1][feature].mean()
                    median_0 = df[df[dependent_feature] == 0][feature].median()
                    median_1 = df[df[dependent_feature] == 1][feature].median()
                    var_0 = df[df[dependent_feature] == 0][feature].var()
                    var_1 = df[df[dependent_feature] == 1][feature].var()

                    print(f"Mean {feature} for group 0: {mean_0:.2f}")
                    print(f"Mean {feature} for group 1: {mean_1:.2f}")
                    print(f"Median {feature} for group 0: {median_0:.2f}")
                    print(f"Median {feature} for group 1: {median_1:.2f}")
                    print(f"Variance of {feature} for group 0: {var_0:.2f}")
                    print(f"Variance of {feature} for group 1: {var_1:.2f}")

                    fig, axes = plt.subplots(1, 2, figsize=(16, 6))
                    sns.boxplot(x=df[dependent_feature], y=df[feature], ax=axes[0])
                    axes[0].set_title(f"{feature} Distribution by {dependent_feature}")
                    sns.barplot(x=df[dependent_feature], y=df[feature], estimator='mean', ax=axes[1])
                    axes[1].set_title(f"Mean {feature} by {dependent_feature}")
                    plt.tight_layout()
                    plt.show()

                if categorical_features:
                  for feature in categorical_features:
                    category_distribution = df.groupby([feature, dependent_feature]).size().unstack(fill_value=0)
                    chi2, p, dof, expected = chi2_contingency(category_distribution)

                    print(f"Chi-Square Test for {feature}: Chi2 = {chi2:.4f}, p-value = {p:.4f}")
                    fig, axes = plt.subplots(1, 2, figsize=(16, 6))
                    sns.countplot(x=df[feature], hue=df[dependent_feature], ax=axes[0])
                    axes[0].set_title(f"{feature} Count by {dependent_feature}")
                    sns.barplot(x=df[feature], y=df[dependent_feature], estimator='mean', ax=axes[1])
                    axes[1].set_title(f"Proportion of {dependent_feature} by {feature}")
                    plt.tight_layout()
                    plt.show()

          p This function performs bivariate analysis by calculating key attributes and generating box plots, bar plots, and count plots to help you better understand the relationship between variables.

      h3#eda-faq EDA FAQ
      .accordion#faq-accordion.mb-4
        .accordion-item
          span.accordion-header
            button.accordion-button(type='button', data-bs-toggle='collapse', data-bs-target='#faq1')
              | What is Exploratory Data Analysis (EDA)?
          .accordion-collapse.collapse#faq1
            .accordion-body
              p EDA is the process of analyzing datasets to summarize their main characteristics, often using visual methods.
        .accordion-item
          span.accordion-header
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target='#faq2')
              | Why is EDA important?
          .accordion-collapse.collapse#faq2
            .accordion-body
              p EDA helps you understand your data, detect anomalies, test assumptions, and prepare for modeling.
        .accordion-item
          span.accordion-header
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target='#faq3')
              | What are common EDA techniques?
          .accordion-collapse.collapse#faq3
            .accordion-body
              p Common techniques include summary statistics, visualizations (histograms, boxplots, scatter plots), and correlation analysis.
        .accordion-item
          span.accordion-header
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target='#faq4')
              | How do I handle missing data in EDA?
          .accordion-collapse.collapse#faq4
            .accordion-body
              p Identify missing values, then decide whether to remove, impute, or flag them based on context.
        .accordion-item
          span.accordion-header
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target='#faq5')
              | What Python libraries are best for EDA?
          .accordion-collapse.collapse#faq5
            .accordion-body
              p pandas, matplotlib, seaborn, and missingno are popular libraries for EDA in Python.
      a(href='#table-of-contents' class='d-block mb-4 text-decoration-none')
        i.bi.bi-arrow-up-circle.me-1(aria-hidden)
        | Back to Top
      // Summary Checklist
      h3#summary Summary Checklist
      ul.list-group.mb-4
        li.list-group-item Data sanity checks and EDA steps explained
        li.list-group-item Code samples use PrismJS markup
        li.list-group-item SEO and accessibility best practices followed
        li.list-group-item Table of Contents, FAQ, and Glossary included
        li.list-group-item Bootstrap 5 and icons used for layout and navigation
      a(href='#table-of-contents' class='d-block mb-4 text-decoration-none')
        i.bi.bi-arrow-up-circle.me-1(aria-hidden)
        | Back to Top
      // Glossary Section
      h3#glossary Glossary of Terms
      .accordion#glossary-accordion.mb-4
        .accordion-item
          span.accordion-header
            button.accordion-button(type='button', data-bs-toggle='collapse', data-bs-target='#glossary1')
              | EDA (Exploratory Data Analysis)
          .accordion-collapse.collapse#glossary1
            .accordion-body
              p Exploratory Data Analysis (EDA) is the process of analyzing datasets to summarize their main characteristics, often using visual methods.
              p For more, see the <a href='https://en.wikipedia.org/wiki/Exploratory_data_analysis' target='_blank' rel='noopener'>Wikipedia article on EDA</a>.
        .accordion-item
          span.accordion-header
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target='#glossary2')
              | Outlier
          .accordion-collapse.collapse#glossary2
            .accordion-body
              p An outlier is a data point that differs significantly from other observations in a dataset.
              p Learn more at <a href='https://en.wikipedia.org/wiki/Outlier' target='_blank' rel='noopener'>Wikipedia: Outlier</a>.
        .accordion-item
          span.accordion-header
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target='#glossary3')
              | IQR (Interquartile Range)
          .accordion-collapse.collapse#glossary3
            .accordion-body
              p The interquartile range (IQR) is a measure of statistical dispersion, being equal to the difference between the upper and lower quartiles.
              p See <a href='https://en.wikipedia.org/wiki/Interquartile_range' target='_blank' rel='noopener'>Wikipedia: Interquartile range</a> for details.
        .accordion-item
          span.accordion-header
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target='#glossary4')
              | Skewness
          .accordion-collapse.collapse#glossary4
            .accordion-body
              p Skewness is a measure of the asymmetry of the probability distribution of a real-valued random variable about its mean.
              p More info: <a href='https://en.wikipedia.org/wiki/Skewness' target='_blank' rel='noopener'>Wikipedia: Skewness</a>.
        .accordion-item
          span.accordion-header
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target='#glossary5')
              | Pandas
          .accordion-collapse.collapse#glossary5
            .accordion-body
              p Pandas is a powerful open-source Python library for data manipulation and analysis, providing flexible data structures like DataFrames.
              p See <a href='https://en.wikipedia.org/wiki/Pandas_(software)' target='_blank' rel='noopener'>Wikipedia: Pandas (software)</a>.
      a(href='#table-of-contents' class='d-block mb-4 text-decoration-none')
        i.bi.bi-arrow-up-circle.me-1(aria-hidden)
        | Back to Top
      // Call to Action
      .card.bg-light.p-4.mt-4.mb-4
        .card-body.text-center
          h3 Explore More Data Science Articles
          p.fw-bold Dive deeper into data science topics:
          a.btn.btn-primary.btn-lg.mb-2(href='/articles/python-the-language-of-data-science.html')
            i.bi.bi-code-slash.me-1(aria-hidden)
            | Python: The Language of Data Science
          br
          a.btn.btn-success.btn-lg.mb-2(href='/articles/an-introduction-to-neural-networks.html')
            i.bi.bi-cpu.me-1(aria-hidden)
            | An Introduction to Neural Networks
