extends ../layouts/articles

block pagehead
  title Getting Started with PUG - History, Background, and Future
  meta(name='description', content='Learn the history, background, and future prospects of PUG, a high-performance template engine for Node.js. Discover its features, community, and maintenance.')
  meta(name="keywords" content="PUG history, PUG template engine, Node.js templates, PUG future, PUG maintenance")
  meta(name='author', content='Mark Hazleton')
  link(rel='canonical', href='https://markhazleton.com/articles/getting-started-with-pug-history-background-and-future.html')

block layout-content

  section#post.painteddesert-section.painteddesert-section-background
    .painteddesert-section-content
      h1 Getting Started with PUG
      h2.subheading.mb-3 History, Background, and Future of a Template Engine
      p.
        PUG is a template engine for Node.js designed to simplify HTML creation with clean and concise syntax.
        It is widely used for generating dynamic web content, offering features such as Express integration,
        conditional rendering, and reusable mixins.

      h2 History of PUG
      p.
        PUG, originally known as Jade, is a high-performance templating engine designed to simplify HTML creation for web developers. Initially released in 2010, Jade was praised for its clean and concise syntax, enabling developers to write readable and maintainable code. It gained significant traction in the Node.js ecosystem, becoming one of the most widely used templating engines during its early years. However, due to trademark issues surrounding the name "Jade," the project was renamed to PUG in 2016.
      p.
        The renaming process marked a new chapter for the templating engine. Along with the name change, the team took the opportunity to introduce updates and improvements, ensuring that PUG stayed relevant in an ever-evolving web development landscape. The change also emphasized the project's focus on open-source collaboration and community-driven development. For more details about the renaming process, you can read the announcement on
      a.btn.btn-primary(href='https://github.com/pugjs/pug/issues/2184', target='_blank', rel='noopener noreferrer') GitHub Issue #2184
      p.
        Over the years, PUG has evolved to incorporate modern web development practices.
        It supports features like conditionals, iterations, mixins, and interpolation,
        making it a powerful tool for building dynamic and reusable web components.
        Additionally, PUG’s integration with Express.js has made it a preferred choice
        for many developers working with Node.js.
        To learn more about the capabilities of PUG, visit the
      a.btn.btn-primary(href='https://pugjs.org', target='_blank', rel='noopener noreferrer') PUG Official Documentation
      p.
        Today, PUG continues to be actively maintained by a dedicated team of contributors.
        With over 21,700 stars and 2,000 forks on its GitHub repository ,
        the engine remains popular among developers who value its simplicity and performance.
        Its supportive community and frequent updates ensure that PUG remains a relevant
        and reliable choice for web templating in modern development projects.
      a.btn.btn-primary(href='https://github.com/pugjs/pug', target='_blank', rel='noopener noreferrer') PUG GitHub Repository

      h2 My Experience with PUG Template Engine
      p.
        Over the past few years, I have extensively used the PUG template engine in my personal website
        and various client projects.
        Its clean and intuitive syntax has been a game-changer for managing and maintaining multiple web development efforts.
        From simple static websites to more dynamic, content-driven platforms,
        PUG has consistently proven to be a reliable and efficient tool.
      p.
        One of the biggest advantages I've found is how easily PUG integrates with the Node.js ecosystem.
        By leveraging PUG in combination with modern Node packages,
        I’ve been able to build websites that are not only visually appealing but also simple to maintain and update.
        The templating engine has streamlined my workflow,
        allowing me to focus more on delivering quality content and functionality rather than getting bogged down by complex HTML structures.
      p.
        PUG has also been a key part of my static site generation strategy.
        For several projects, I’ve used PUG to build fast,
        static websites that are easy to deploy and require minimal upkeep.
        The ability to reuse components and apply dynamic logic in templates
        has significantly reduced development time while ensuring consistency across pages.
      p.
        In my experience, PUG has been a cornerstone in creating efficient and scalable web solutions.
        Its flexibility, coupled with its strong compatibility with modern tools,
        makes it an invaluable asset for developers looking to produce high-quality,
        maintainable websites. Whether it's for a personal project or a professional one,
        I continue to rely on PUG to deliver exceptional results.


      h2 Key Features of PUG
      ul
        li Express integration for seamless use with Node.js applications
        li Advanced syntax for conditionals, iterations, and interpolations
        li Support for filters, includes, and inheritance
        li Flexible mixins for reusable code components

      h2 Community and Maintenance
      p.
        PUG enjoys a vibrant developer community with an active GitHub repository. With over 21,700 stars and regular updates, the project remains well-maintained. The availability of plugins, tutorials, and forums ensures strong community support.
      a.btn.btn-primary(href="https://github.com/pugjs/pug" target="_blank") Explore PUG Repository on GitHub

      h2 The Future of PUG
      p.
        The future of PUG looks promising as it continues to receive updates and maintain compatibility with modern development frameworks. Its lightweight, performance-focused approach and SEO-friendly markup generation make it a reliable choice for web developers.
      a.btn.btn-primary(href="https://moldstud.com/articles/p-pug-development-a-road-less-traveled-but-worth-the-journey" target="_blank") Read About PUG's Future

      h2 How to Install PUG
      p.
        To get started with PUG, follow these simple steps:
      dl
        dt Step 1: Install Node.js
        dd Ensure that Node.js is installed on your machine.
        dt Step 2: Add PUG to Your Project
        dd Use npm to install PUG by running:
          pre.language-bash
            code.language-bash.
              npm install pug --save
        dt Step 3: Set Up Express
        dd Configure your Express app with PUG as the view engine:
          pre.language-javascript
            code.language-javascript.
              app.set("view engine", "pug");
              app.set("views", "path/to/views");

      h2 Hello World with PUG
      p.
        Create your first PUG template to display a simple message:
      dl
        dt PUG Template (view.pug)
        dd
          pre.language-pug
            code.language-pug.
              p Hello World, \#{name}!
        dt Compile and Render
        dd Use the following JavaScript code to render your PUG template:
          pre.language-javascript
            code.language-javascript.
              const pug = require('pug');
              const templateCompiler = pug.compileFile('view.pug');
              console.log(templateCompiler({ name: 'Mark' }));
        dt Output
        dd
          pre.language-html
            code.language-html.
              <p>Hello World, Mark!</p>

      h2 SEO-Friendly Markup
      p.
        One often overlooked benefit of using Pug is its ability to generate SEO-friendly markup.
        Pug's clean and organized syntax helps search engine crawlers easily parse and index your web pages,
        resulting in improved search engine rankings and visibility.
        By structuring your code with Pug, you can ensure that your website is optimized for search engines,
        attracting more organic traffic.
      p.
        According to a study by HubSpot,
        websites that rank on the first page of Google search results receive a whopping 95% of web traffic,
        while websites on the second page receive just 5%.
        By utilizing Pug for your development projects,
        you can improve your chances of ranking higher on search engine results pages (SERPs)
        and drive more traffic to your website.
      p.
        In conclusion, Pug development not be a dominiant player in the web development space,
        but it is definitely worth checking out.
        With its simplicity, performance, community support, and SEO-friendly markup,
        Pug offers a host of benefits that can elevate your development projects to the next level.

      .card.mb-4
        .card-header
          h3 Deep Dive: Start Bootstrap and PUG Templates
        .card-body
          p.
            Start Bootstrap is a popular platform that provides free and premium Bootstrap-based themes and UI kits.
            Among their premium offerings, SB UI Kit Pro stands out for its use of
            PUG templates.
            PUG simplifies the process of creating reusable and maintainable code,
            making it easier to design and implement responsive web interfaces.
          p.
            SB UI Kit Pro is built on Bootstrap 5
            and includes:
          ul
            li Pre-built landing page templates to jumpstart projects
            li Inner page templates for common web application needs
            li A modular, block-based structure for flexibility
            li Integration with modern web development workflows, including PUG
          p.
            Why choose SB UI Kit Pro with PUG templates?
          ul
            li Simplified syntax reduces HTML verbosity
            li Encourages reusable components for maintainable codebases
            li Seamless integration with Node.js and Express.js projects
            li Pre-configured templates save development time while maintaining professional quality

          strong Useful Resources
          ul
            li
              a(href="https://pugjs.org", target="_blank", rel="noopener noreferrer") Official PUG Documentation
            li
              a(href="https://getbootstrap.com", target="_blank", rel="noopener noreferrer") Bootstrap Official Website
            li
              a(href="https://github.com/startbootstrap/", target="_blank", rel="noopener noreferrer") Start Boostrap GitHub
          p.
            With SB UI Kit Pro and PUG templates, you can create modern, visually appealing, and SEO-friendly websites with ease. The combination of Bootstrap's responsive grid and PUG's templating capabilities makes this toolkit a go-to for developers looking to streamline their workflows and deliver high-quality results.
        .card-footer
          a.btn.btn-primary(href="https://startbootstrap.com/theme/sb-ui-kit-pro", target="_blank", rel="noopener noreferrer") Explore SB UI Kit Pro

      h2 Understanding PUG Mixins
      p.
        Mixins in PUG are a powerful feature that allows you to create reusable code snippets, making your templates cleaner, more modular, and easier to maintain. They are particularly useful for generating repetitive HTML structures with varying data.
      p.
        One practical application of PUG mixins in my projects was creating a dynamic Bootstrap carousel to showcase the websites I have built. Using mixins, I was able to define reusable components for the carousel structure and its captions, making it simple to iterate over project data and render the carousel dynamically.

      h3 The Carousel Mixins
      p.
        Below is the code for the mixins I used. The first mixin, `carousel-caption`, generates the captions for each slide, while the second mixin, `carousel`, creates the overall carousel structure:
      pre.language-pug
        code.language-pug.
          //- carousel caption
          mixin carousel-caption(item)
            .carousel-caption
              unless !item.h1
              unless !item.p
              unless !item.button
            p
              a.btn.btn-lg.btn-primary(href=item.button.url role="button") \#{item.button.caption}
          //- carousel
          mixin carousel(id, items)
            .carousel.slide.carousel-dark(id="carousel-" + id ,data-bs-ride="carousel")
              //- Indicators
              .carousel-indicators
                each item, index in items
                  if(index === 0)
                    button.active(type="button", data-bs-target="#carousel-" + id, data-bs-slide-to=index, aria-current="true", aria-label="Slide " + (index + 1))
                  else
                    button(type="button", data-bs-target="#carousel-" + id, data-bs-slide-to=index, aria-label="Slide " + (index + 1))
            //- Wrapper for slides
            .carousel-inner()
              each item, index in items
                if(index === 0)
                  .carousel-item.active
                    .card
                      .card-header.text-center
                        a(href=item.h target="_blank" rel="noopener noreferrer" title=item.p)=item.p
                      .card-body
                        img.img-fluid(src=item.image title=item.h alt=item.p)
                        p.text-black=item.d
                    +carousel-caption(item)
                else
                  .carousel-item
                    .card
                      .card-header.text-center
                        a(href=item.h target="_blank" rel="noopener noreferrer" title=item.p)=item.p
                      .card-body
                        img.img-fluid(src=item.image title=item.h alt=item.p)
                        p.text-black=item.d
                    +carousel-caption(item)

            //- Controls
            button.carousel-control-prev(data-bs-target="#carousel-" + id, data-bs-slide="prev", type="button")
              span.carousel-control-prev-icon(aria-hidden="true")
              span.visualy-hidden Previous
            button.carousel-control-next(data-bs-target="#carousel-" + id, data-bs-slide="next", type="button")
              span.carousel-control-next-icon(aria-hidden="true")
              span.visualy-hidden Next

      h3 How the Carousel Showcases Projects
      p.
        The `carousel` mixin is invoked with the `projects` data array to generate the entire carousel. Each slide displays a project with its image, description, and a link to view the project. The dynamic generation of slides ensures scalability, allowing new projects to be added easily without modifying the carousel structure.
      p.
        Here is how the mixin is used in a card to display the carousel:

      pre.language-pug
        code.language-pug.
          .card.mb4
            .card-header
              h2.card-title Website Projects
              p.card-text.
                These are some of the websites I have built. I have used a variety of technologies including HTML, CSS, JavaScript, and ASP.Net.
                I have also used a variety of frameworks including Bootstrap, jQuery, and PUG Templates.
            .card-body
              +carousel("Projects", projects)
            .card-footer
              p

      h3 Conclusion
      p.
        Using PUG mixins for creating reusable components like this carousel has significantly streamlined my development workflow. It ensures consistency in design while making it easy to add, modify, or remove projects in the future. Mixins are a cornerstone of efficient PUG development, especially for dynamic, data-driven websites.
