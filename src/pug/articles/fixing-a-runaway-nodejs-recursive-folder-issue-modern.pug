extends ../layouts/modern-layout

block layout-content
  br
  // Hero Section
  section.bg-gradient-primary.py-5
    .container
      .row.align-items-center
        .col-lg-10.mx-auto.text-center
          h1.display-4.fw-bold.mb-3
            i.bi.bi-folder-symlink.me-3
            | Fixing a Runaway Node.js Recursive Folder Issue
          h2.h3.mb-4 Resolving a program that creates endless recursive folders
          p.lead.mb-5
            | Node.js applications are generally efficient, but sometimes a bug can lead to unexpected consequences. This article explains how to handle a situation where a Node.js program creates thousands of nested directories that are nearly impossible to delete with standard tools.

  // Main Article Content
  article#main-article
    .container
      .row
        .col-lg-8.mx-auto
          // Table of Contents
          nav#table-of-contents.mb-5(aria-label='Table of Contents')
            .card.bg-light.shadow-sm
              .card-header
                h3.card-title.mb-0.fw-bold
                  i.bi.bi-list-ul.me-2
                  | Table of Contents
              .card-body
                ul.list-group.list-group-flush
                  li.list-group-item: a.text-decoration-none(href='#problem') The Problem: Near-Infinite Recursive Folders
                  li.list-group-item: a.text-decoration-none(href='#windows-limitations') Long Path Support in Windows
                  li.list-group-item: a.text-decoration-none(href='#attempted-solutions') Steps Attempted Before Writing C++
                  li.list-group-item: a.text-decoration-none(href='#cpp-solution') Writing a C++ Program Solution
                  li.list-group-item: a.text-decoration-none(href='#code-explanation') Explanation of the C++ Code

          // Problem Section
          section#problem.mb-5
            .card.shadow-sm.border-0
              .card-header.bg-danger.text-white
                h2.h3.mb-0
                  i.bi.bi-exclamation-triangle.me-2
                  | The Problem: Near-Infinite Recursive Folders
              .card-body
                p.mb-0
                  | The issue began when a Node.js script, due to faulty logic, created recursive directories.
                  | Each iteration of the script added a new folder inside the previous one. This quickly grew
                  | into thousands of nested directories, becoming impossible to delete manually through Windows
                  | Explorer or Command Prompt due to the excessive depth of the folder structure.

          // Windows Limitations Section
          section#windows-limitations.mb-5
            .card.shadow-sm.border-0
              .card-header.bg-primary.text-white
                h2.h3.mb-0
                  i.bi.bi-windows.me-2
                  | Long Path Support in Windows
              .card-body
                p.mb-4
                  | Windows has a long-standing history of limitations with file path lengths. The default maximum
                  | length for paths is 260 characters, known as "MAX_PATH." By default, attempts to create or
                  | manipulate paths longer than this would fail. However, starting with Windows 10 (Anniversary
                  | Update), it became possible to enable long file path support by modifying the Group Policy or
                  | Windows Registry.

                .card.mb-4.border-0.bg-light
                  .card-header.bg-secondary.text-white
                    h3.h5.mb-0 Enabling Long File Path Support
                  .card-body
                    p.mb-4 To enable support for longer paths, I did the following:

                    .row.mb-3
                      .col-md-6
                        .card.mb-3.h-100.border-0.bg-white
                          .card-header.bg-info.text-white
                            h4.h6.mb-0
                              i.bi.bi-gear.me-2
                              | Group Policy Editor Method
                          .card-body
                            p.mb-0
                              | Navigated to "Computer Configuration > Administrative Templates > System > Filesystem"
                              | and enabled the "Enable Win32 long paths" policy.

                      .col-md-6
                        .card.mb-3.h-100.border-0.bg-white
                          .card-header.bg-info.text-white
                            h4.h6.mb-0
                              i.bi.bi-braces.me-2
                              | Registry Edit Method
                          .card-body
                            p.mb-0
                              | As an alternative, I edited the Registry directly by setting the value of
                              | "LongPathsEnabled" in
                              code HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem
                              |  to
                              code 1
                              | . This allowed support for file paths longer than 260 characters.

                .alert.alert-warning
                  h4.alert-heading.h5
                    i.bi.bi-info-circle.me-2
                    | Why Path Length is Important
                  p.mb-0
                    | Despite enabling long file path support, I still encountered limitations with other tools.
                    | The core issue was that many standard Windows utilities (such as Command Prompt and
                    | PowerShell) still had trouble handling long paths reliably, even with the new support.
                    | That's why a custom C++ solution, which directly interacts with the WIN32 API, became
                    | necessary.

          // Attempted Solutions Section
          section#attempted-solutions.mb-5
            .card.shadow-sm.border-0
              .card-header.bg-warning.text-dark
                h2.h3.mb-0
                  i.bi.bi-tools.me-2
                  | Steps Attempted Before Writing the C++ Program
              .card-body
                p.mb-4
                  | Initially, I tried using built-in tools like Windows Command Prompt and PowerShell, thinking
                  | I could delete the directories with a simple recursive command. Below are the tools I tried
                  | to use before concluding that I needed a custom solution:

                // Command Prompt Method
                .card.mb-4.border-0.bg-light
                  .card-header.bg-secondary.text-white
                    h3.h5.mb-0
                      i.bi.bi-terminal.me-2
                      | Windows Command Prompt
                  .card-body
                    p.mb-3
                      | The Windows Command Prompt is a simpler tool that lacks robust recursion and error-handling
                      | mechanisms. Commands like "rmdir" are not built to handle such complex directory structures
                      | and will often terminate with errors related to file path length or file locks.

                    pre.language-bash.bg-dark.text-light.p-3.rounded
                      code.language-bash rmdir /s "C:\Your\Directory\Path"

                    p.mb-0
                      | Using the "rmdir /s" command, I attempted to remove the entire folder structure recursively.
                      | While this works well with normal directories, it failed in this case due to the extreme depth
                      | and length of the directory paths. Windows has limitations on path lengths, and this caused
                      | the command to fail with errors like "The file name is too long." or "The system cannot find
                      | the path specified." or just having the command shell close abruptly.

                // PowerShell Method
                .card.mb-4.border-0.bg-light
                  .card-header.bg-secondary.text-white
                    h3.h5.mb-0
                      i.bi.bi-terminal-plus.me-2
                      | PowerShell
                  .card-body
                    p.mb-3
                      | PowerShell is usually a robust tool for file management, but when dealing with an extremely
                      | large number of nested directories, it often fails due to the path length limitation and
                      | the recursion depth.

                    p.mb-3
                      | I then tried using PowerShell with the "Remove-Item -Recurse -Force" command. PowerShell
                      | is a more powerful tool for managing files and directories, but it, too, failed due to the long
                      | file paths and the number of folders. PowerShell inherits the same file path limitations as the
                      | Command Prompt unless configured differently, so this option was insufficient.

                    pre.language-bash.bg-dark.text-light.p-3.rounded
                      code.language-bash rm -r -force "C:\Your\Directory\Path"

                    p.mb-3
                      | Though PowerShell had limitations in my case, a potential workaround could involve using the
                      | following script, which attempts to bypass the long path limitation by enabling long paths and
                      | splitting the process into smaller recursive chunks:

                    pre.language-bash.bg-dark.text-light.p-3.rounded
                      code.language-bash Remove-Item -LiteralPath "C:\Your\Directory\Path" -Recurse -Force

                    p.mb-0
                      | This script could work for some, but in extreme cases like mine, where paths were excessively long
                      | and directories numbered in the thousands, it still fell short.

                // Additional Methods
                .row
                  .col-md-6
                    .card.mb-3.h-100.border-0.bg-light
                      .card-header.bg-secondary.text-white
                        h3.h5.mb-0
                          i.bi.bi-ubuntu.me-2
                          | Bash Shell in VS Code
                      .card-body
                        p.mb-3
                          | While Linux systems generally handle file systems more gracefully, using Bash on WSL
                          | still relies on Windows' underlying file system. This means that although the Linux
                          | environment is more forgiving with paths, it inherits the limitations from Windows.

                        p.mb-0
                          | Linux systems handle long paths and recursive operations much more gracefully than Windows.
                          | I attempted to use Bash through VS Code to navigate and delete
                          | the directories. However, even though Linux could theoretically handle this depth of recursion,
                          | Bash failed due to Windows' underlying file system still imposing limits on path lengths.

                  .col-md-6
                    .card.mb-3.h-100.border-0.bg-light
                      .card-header.bg-secondary.text-white
                        h3.h5.mb-0
                          i.bi.bi-file-earmark-arrow-up.me-2
                          | Robocopy
                      .card-body
                        p.mb-0
                          | Robocopy is a robust file copy utility built into Windows that can handle complex file
                          | operations. I attempted to use Robocopy to mirror an empty directory structure over the
                          | runaway directory, effectively overwriting it. However, Robocopy also failed due to the
                          | path length limitations, as it couldn't traverse the deep directory structure to delete the
                          | folders. I also tried to purge the directory using Robocopy, but it was unable to handle the
                          | excessive depth of the folder structure.

                .alert.alert-primary.mt-3
                  p.mb-0
                    strong Conclusion:
                    | Ultimately, after trying all the built-in tools and existing solutions, I decided to write a C++ program
                    | that used the WIN32 API to delete directories recursively.

          // C++ Solution Section
          section#cpp-solution.mb-5
            .card.shadow-sm.border-0
              .card-header.bg-success.text-white
                h2.h3.mb-0
                  i.bi.bi-code-square.me-2
                  | Writing a C++ Program Solution
              .card-body
                p.mb-4
                  | Writing the custom C++ solution allowed me to bypass the limitations of standard Windows tools.
                  | The WIN32 API offers direct access to the underlying file system and can handle long paths
                  | effectively, provided the paths are prefixed with "\\\\?\\". This special prefix enables the API to
                  | handle file paths beyond the normal MAX_PATH limitation. By using the WIN32 API, I was able to
                  | traverse and delete directories without running into the typical errors caused by long paths.

                p.mb-4
                  | This program first collected all directories and files and then removed them
                  | from the deepest level up to the root, ensuring safe cleanup without getting errors for trying to
                  | delete a folder that has sub-folders.

                // Code with collapse button
                .mb-4
                  button.btn.btn-primary.mb-2(type='button', data-bs-toggle='collapse', data-bs-target='#cppCode')
                    i.bi.bi-code-slash.me-2
                    | Show/Hide C++ Code

                  .collapse#cppCode
                    pre.language-csharp.bg-dark.text-light.p-3.rounded
                      code.language-csharp.
                        #include <iostream>
                        #include <windows.h>
                        #include <string>
                        #include <vector>
                        #include <fstream>

                        void LogOperation(const std::wstring& message, const std::wstring& logFileName = L"operation_log.txt") {
                          std::wofstream logFile(logFileName, std::ios::app);
                          if (logFile.is_open()) {
                            logFile << message << std::endl;
                          }
                        }

                        void DeleteDirectoryRecursively(const std::wstring& directory) {
                          std::vector<std::wstring> directoriesToDelete;
                          std::vector<std::wstring> allDirectories;

                          directoriesToDelete.push_back(directory);

                          while (!directoriesToDelete.empty()) {
                            std::wstring currentDir = directoriesToDelete.back();
                            directoriesToDelete.pop_back();

                            WIN32_FIND_DATA findFileData;
                            std::wstring searchPath = currentDir + L"\\*";
                            HANDLE hFind = FindFirstFile(searchPath.c_str(), &findFileData);

                            if (hFind != INVALID_HANDLE_VALUE) {
                              do {
                                const std::wstring fileOrDirName = findFileData.cFileName;
                                if (fileOrDirName != L"." && fileOrDirName != L"..") {
                                  const std::wstring fullPath = currentDir + L"\\" + fileOrDirName;
                                  if (findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {
                                    directoriesToDelete.push_back(fullPath);
                                    allDirectories.push_back(fullPath);
                                  } else {
                                    SetFileAttributes(fullPath.c_str(), FILE_ATTRIBUTE_NORMAL);
                                    DeleteFile(fullPath.c_str());
                                  }
                                }
                              } while (FindNextFile(hFind, &findFileData) != 0);
                              FindClose(hFind);
                            }
                          }

                          std::reverse(allDirectories.begin(), allDirectories.end());

                          for (const std::wstring& dir : allDirectories) {
                            RemoveDirectory(dir.c_str());
                          }

                          RemoveDirectory(directory.c_str());
                        }

                        int main() {
                          const std::wstring baseDirectory = L"\\\\?\\C:\\AzureDevOps\\runaway-node";
                          LogOperation(L"Starting directory delete process.");
                          DeleteDirectoryRecursively(baseDirectory);
                          LogOperation(L"Directory delete process completed.");
                          return 0;
                        }

          // Code Explanation Section
          section#code-explanation.mb-5
            .card.shadow-sm.border-0
              .card-header.bg-info.text-white
                h2.h3.mb-0
                  i.bi.bi-file-earmark-code.me-2
                  | Explanation of the C++ Code
              .card-body
                p.mb-4
                  | This C++ code starts by scanning the directory provided (in this case, "C:\\AzureDevOps\\runaway-node")
                  | and collecting a list of all subdirectories. It does this recursively, storing all directories for later deletion.
                  | After collecting all the directories, it deletes them from the deepest folder up to the root directory.

                .card.border-0.bg-light.mb-4
                  .card-body
                    h3.h5
                      i.bi.bi-list-check.me-2
                      | Key Components of the Solution:

                    ol.mb-0
                      li.mb-3
                        strong Special Path Prefix:
                        | The code uses "\\\\?\\" prefix before the path, which tells Windows to disable path parsing and bypass the 260-character limit.

                      li.mb-3
                        strong Breadth-First Directory Collection:
                        | The program uses a breadth-first approach to collect all directories that need to be deleted.

                      li.mb-3
                        strong Reverse Deletion Order:
                        | After collecting all directories, it reverses the order so that it deletes from the deepest nested folder first.

                      li.mb-3
                        strong File Attribute Handling:
                        | The code sets file attributes to normal before deletion, which helps overcome issues with read-only or hidden files.

                      li
                        strong Logging:
                        | The program includes a logging function to track the progress and any potential issues during the deletion process.

                .alert.alert-success
                  h4.alert-heading.h5
                    i.bi.bi-check-circle.me-2
                    | The Result
                  p.mb-0
                    | This C++ solution successfully deleted the thousands of nested directories that were created by the runaway Node.js script. It handled the long paths without issues and completed the cleanup in a reasonable amount of time. By working directly with the WIN32 API, the program was able to overcome the limitations of standard Windows tools and utilities.

          // Final Section - Conclusion
          section#conclusion.mb-5
            .card.border-primary.shadow-sm
              .card-header.bg-primary.text-white
                h2.h3.mb-0
                  i.bi.bi-trophy.me-2
                  | Key Takeaways
              .card-body
                p.lead.mb-4
                  | When dealing with extremely deep directory structures in Windows, standard tools often fail due to path length limitations, even with modern settings enabled.

                .alert.alert-success.border-0.shadow-sm.mb-4
                  .d-flex.align-items-start
                    i.bi.bi-star-fill.text-success.me-3.fs-4
                    div
                      h4.alert-heading.h6.mb-2 Prevention is Better Than Cure
                      p.mb-0
                        | Always test file system operations in your Node.js scripts, especially when they involve recursive directory creation or manipulation. Add appropriate validation and safeguards to prevent runaway processes.

                p.mb-0
                  | For extreme cases where standard utilities fail, writing a custom solution using the WIN32 API with the "\\\\?\\" path prefix is the most reliable approach to handle long paths and deep directory structures in Windows.

          // Back to Top Button
          .text-center.mt-5
            a.btn.btn-primary(href='#table-of-contents')
              i.bi.bi-arrow-up-circle.me-2
              | Back to Table of Contents
