extends ../layouts/modern-layout

block layout-content
  br
  // Hero Section
  section.bg-gradient-primary.py-5
    .container
      .row.align-items-center
        .col-lg-10.mx-auto.text-center
          h1.display-4.fw-bold.mb-3
            i.bi.bi-lightbulb.me-3
            | The Building of React-native-web-start
          h2.h3.mb-4 Exploring the Development of a Cross-Platform Tool
          p.lead.mb-5
            | React-native-web-start is designed to streamline web and mobile app development using React Native. This article explores its creation, challenges, and benefits.

  // Quick Start Call-to-Action
  section.py-4.bg-light
    .container
      .row
        .col-lg-10.mx-auto
          .card.border-0.shadow-sm
            .card-body.text-center.py-4
              h3.h5.text-primary.mb-3
                i.bi.bi-rocket.me-2
                | React-native-web-start
              p.mb-3 Production-ready cross-platform starter template with Vite, TypeScript, and automated deployment.

              .d-flex.flex-wrap.justify-content-center.gap-2
                a.btn.btn-primary(href="https://github.com/markhazleton/react-native-web-start" target="_blank")
                  i.bi.bi-github.me-2
                  | GitHub
                a.btn.btn-success(href="https://markhazleton.github.io/react-native-web-start" target="_blank")
                  i.bi.bi-eye.me-2
                  | Live Demo
  // Main Article Content
  article#main-article
    .container
      .row
        .col-lg-8.mx-auto
          section#introduction.mb-5
            h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
              i.bi.bi-lightbulb.me-2
              | Introduction: The Vision Behind React-native-web-start

            .alert.alert-info.border-start.border-4.border-info
              .d-flex
                i.bi.bi-info-circle.text-info.me-3.fs-4
                div
                  p.mb-0.
                    As a Solutions Architect with years of experience building enterprise web applications like WebSpark, TeachSpark, ArtSpark,
                    and PromptSpark, I've witnessed the evolution of cross-platform development firsthand.

            p.lead.
              The challenge has always been clear: how do you build modern, performant applications that work seamlessly across web, iOS, and Android
              without compromising developer experience or code quality?

            p.
              React Native Web promised to solve this puzzle, so I thought I would take a shot at creating a starter template for my future projects.
              I wanted to have proper TypeScript integration, modern build tools, comprehensive documentation, and production-ready deployment pipelines.

            .card.bg-light.border-0.mb-4
              .card-body
                h5.card-title
                  i.bi.bi-target.me-2
                  | Project Goals
                ul.list-unstyled.mb-0
                  li.mb-2
                    i.bi.bi-check-circle-fill.text-success.me-2
                    strong Enterprise-grade foundation
                    | - Complete TypeScript integration with strict standards
                  li.mb-2
                    i.bi.bi-check-circle-fill.text-success.me-2
                    strong Modern build tools
                    | - Vite for superior performance over Webpack
                  li.mb-2
                    i.bi.bi-check-circle-fill.text-success.me-2
                    strong Comprehensive documentation
                    | - In-depth guides and troubleshooting resources
                  li.mb-2
                    i.bi.bi-check-circle-fill.text-success.me-2
                    strong Production-ready CI/CD
                    | - Automated deployment with GitHub Actions

            p This article chronicles the entire journey from conception to production deployment, sharing every technical decision, challenge overcome, and lesson learned along the way.

        // Genesis Section
        section#genesis.mb-5
          h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
            i.bi.bi-git.me-2
            | The Genesis: Creating the GitHub Repository

          h4.h4.text-secondary.mb-3 Initial Repository Setup

          p The journey began with a simple #[code git init] command, but the planning that preceded it was extensive. After analyzing dozens of existing React Native Web projects, I identified key gaps that needed addressing:

          .row.g-4.mb-4
            .col-md-6
              .card.h-100.border-danger.border-2
                .card-header.bg-danger.text-white
                  h6.mb-0
                    i.bi.bi-exclamation-triangle.me-2
                    | Problems Identified
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-x-circle.text-danger.me-2
                      | Outdated tooling (Webpack instead of Vite)
                    li.mb-2
                      i.bi.bi-x-circle.text-danger.me-2
                      | Incomplete TypeScript support
                    li.mb-2
                      i.bi.bi-x-circle.text-danger.me-2
                      | Poor documentation quality
                    li.mb-2
                      i.bi.bi-x-circle.text-danger.me-2
                      | No CI/CD pipeline
                    li.mb-2
                      i.bi.bi-x-circle.text-danger.me-2
                      | Missing production features

            .col-md-6
              .card.h-100.border-success.border-2
                .card-header.bg-success.text-white
                  h6.mb-0
                    i.bi.bi-check-circle.me-2
                    | Solutions Implemented
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Modern Vite build system
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Strict TypeScript configuration
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Comprehensive documentation
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Automated GitHub Actions
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Version tracking & SEO

          .bg-dark.text-light.p-3.rounded.mb-4
            h6.text-warning.mb-3
              i.bi.bi-terminal.me-2
              | Initial Repository Creation
            pre.text-light.mb-0: code.
              # Initial repository creation
              mkdir react-native-web-start
              cd react-native-web-start
              git init
              git remote add origin https://github.com/markhazleton/react-native-web-start.git

          h4.h4.text-secondary.mb-3 Repository Structure Philosophy

          p I designed the repository structure with maintainability and scalability in mind, following enterprise patterns successfully implemented in WebSpark and other production applications:

          .card.border-0.shadow-sm
            .card-body
              .bg-dark.text-light.p-3.rounded
                pre.text-light.mb-0: code.
                  react-native-web-start/
                  ├── documentation/          # Comprehensive project documentation
                  ├── src/                   # Application source code
                  │   ├── components/        # Reusable UI components
                  │   ├── screens/          # Screen-level components
                  │   ├── services/         # API and utility services
                  │   ├── types/            # TypeScript type definitions
                  │   └── utils/            # Helper functions
                  ├── scripts/              # Build and utility scripts
                  ├── .github/workflows/    # GitHub Actions CI/CD
                  ├── public/               # Static assets for web
                  └── build-info/           # Generated build metadata

        // Foundation Architecture Section
        section#foundation.mb-5
          h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
            i.bi.bi-building.me-2
            | Foundation Architecture: Choosing the Right Stack

          h4.h4.text-secondary.mb-3 Technology Stack Analysis

          p Selecting the right technology stack was crucial for long-term success. After extensive research and testing, I chose:

          .row.g-4.mb-4
            .col-lg-4
              .card.h-100.border-primary
                .card-header.bg-primary.text-white
                  h6.mb-0
                    i.bi.bi-code-square.me-2
                    | Core Framework
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      strong React Native 0.74.0
                      br
                      small.text-muted Latest stable version with improved performance
                    li.mb-2
                      strong React Native Web 0.19.12
                      br
                      small.text-muted Mature web compilation layer
                    li.mb-2
                      strong TypeScript 5.2.2
                      br
                      small.text-muted Strict type safety with latest features

            .col-lg-4
              .card.h-100.border-success
                .card-header.bg-success.text-white
                  h6.mb-0
                    i.bi.bi-gear.me-2
                    | Build System
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      strong Vite 7.0.6
                      br
                      small.text-muted Lightning-fast development server
                    li.mb-2
                      strong ESBuild
                      br
                      small.text-muted Ultra-fast TypeScript compilation
                    li.mb-2
                      strong Modern Defaults
                      br
                      small.text-muted ES modules, tree-shaking, optimal chunking

            .col-lg-4
              .card.h-100.border-info
                .card-header.bg-info.text-white
                  h6.mb-0
                    i.bi.bi-tools.me-2
                    | Development Tools
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      strong ESLint & Prettier
                      br
                      small.text-muted Code quality and formatting
                    li.mb-2
                      strong Husky
                      br
                      small.text-muted Git hooks for pre-commit validation
                    li.mb-2
                      strong Jest
                      br
                      small.text-muted Testing framework

          .alert.alert-warning.border-start.border-4.border-warning
            h5.alert-heading
              i.bi.bi-lightning.me-2
              | Why Vite Over Webpack?
            p.mb-3 This decision deserves special attention as it significantly impacts developer experience:
            .row
              .col-md-6
                h6.text-success
                  i.bi.bi-check-circle.me-2
                  | Vite Advantages
                ul.mb-0
                  li Cold start performance: 10x faster than Webpack
                  li Hot Module Replacement: Sub-second updates
                  li Modern defaults: ES modules, tree-shaking
                  li Rich plugin ecosystem with React Native Web support
              .col-md-6
                h6.text-warning
                  i.bi.bi-exclamation-circle.me-2
                  | Implementation Challenges
                ul.mb-0
                  li Configuring Vite for React Native Web
                  li Alias resolution for cross-platform imports
                  li Global variable definitions
                  li Dependency optimization

          h5.h5.text-secondary.mb-3 Vite Configuration Implementation

          .bg-dark.text-light.p-3.rounded
            h6.text-warning.mb-3
              i.bi.bi-file-code.me-2
              | vite.config.ts - Key Configuration
            pre.text-light.mb-0: code.
              export default defineConfig({
                plugins: [react()],
                resolve: {
                  alias: {
                    'react-native': 'react-native-web',
                    'react-native-vector-icons': '@expo/vector-icons',
                  },
                  extensions: ['.web.js', '.web.ts', '.web.tsx', '.js', '.ts', '.tsx'],
                },
                define: {
                  global: 'globalThis',
                  __DEV__: process.env.NODE_ENV === 'development',
                },
                optimizeDeps: {
                  include: ['react-native-web'],
                },
              });

        // Continue with remaining sections...
        section#development-environment.mb-5
          h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
            i.bi.bi-laptop.me-2
            | Setting Up the Development Environment

          h4.h4.text-secondary.mb-3 Package.json Configuration

          p The #[code package.json] file serves as the project's command center. I designed it with clear scripts for different development phases:

          .card.border-0.shadow-sm.mb-4
            .card-body
              .bg-dark.text-light.p-3.rounded
                h6.text-warning.mb-3
                  i.bi.bi-file-code.me-2
                  | Key Package.json Scripts
                pre.text-light.mb-0: code.
                  "scripts": {
                    "dev": "vite",
                    "web": "vite",
                    "generate-build-info": "node scripts/generate-build-info.js",
                    "prebuild": "node scripts/generate-build-info.js && npm run copy-docs",
                    "build": "vite build",
                    "preview": "vite preview",
                    "android": "react-native run-android",
                    "ios": "react-native run-ios",
                    "start": "react-native start"
                  }

          h4.h4.text-secondary.mb-3 TypeScript Configuration

          .alert.alert-info.border-start.border-4.border-info
            p.mb-0 Type safety is non-negotiable in enterprise applications. The #[code tsconfig.json] enforces strict standards while maintaining compatibility with modern JavaScript features.

          .bg-dark.text-light.p-3.rounded
            h6.text-warning.mb-3
              i.bi.bi-file-code.me-2
              | tsconfig.json - Strict Configuration
            pre.text-light.mb-0: code.
              {
                "compilerOptions": {
                  "target": "ES2020",
                  "useDefineForClassFields": true,
                  "lib": ["ES2020", "DOM", "DOM.Iterable"],
                  "module": "ESNext",
                  "skipLibCheck": true,
                  "moduleResolution": "bundler",
                  "allowImportingTsExtensions": true,
                  "resolveJsonModule": true,
                  "isolatedModules": true,
                  "noEmit": true,
                  "jsx": "react-jsx",
                  "strict": true,
                  "noUnusedLocals": true,
                  "noUnusedParameters": true,
                  "noFallthroughCasesInSwitch": true
                }
              }

        // GitHub Actions Section
        section#github-actions.mb-5
          h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
            i.bi.bi-github.me-2
            | GitHub Actions: Automating Deployment

          h4.h4.text-secondary.mb-3 The Evolution of CI/CD Pipeline

          p The GitHub Actions workflow went through several iterations before reaching production quality. Here's the final, battle-tested version:

          .card.border-0.shadow-sm.mb-4
            .card-header.bg-secondary.text-white
              h6.mb-0
                i.bi.bi-workflow.me-2
                | Production-Ready Deployment Workflow
            .card-body.p-0
              .bg-dark.text-light.p-3
                pre.text-light.mb-0: code.
                  name: Deploy to GitHub Pages

                  on:
                    push:
                      branches: [ main ]
                    pull_request:
                      branches: [ main ]
                    workflow_dispatch:

                  permissions:
                    contents: read
                    pages: write
                    id-token: write

                  jobs:
                    build:
                      runs-on: ubuntu-latest

                      steps:
                      - name: Checkout repository
                        uses: actions/checkout@v4
                        with:
                          fetch-depth: 0  # Fetch full history for git info

                      - name: Setup Node.js 20
                        uses: actions/setup-node@v4
                        with:
                          node-version: '20'
                          cache: 'npm'

                      - name: Install dependencies
                        run: npm install --legacy-peer-deps

                      - name: Generate build information
                        run: node scripts/generate-build-info.js
                        env:
                          NODE_ENV: production
                          GITHUB_RUN_NUMBER: ${{ github.run_number }}

                      - name: Build application
                        run: npm run build
                        env:
                          NODE_ENV: production

          h5.h5.text-secondary.mb-3 Key Deployment Challenges Solved

          .row.g-4
            .col-md-6
              .card.h-100.border-warning
                .card-header.bg-warning.text-dark
                  h6.mb-0
                    i.bi.bi-exclamation-triangle.me-2
                    | Challenges Encountered
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-1-circle.text-warning.me-2
                      strong Node.js Version Compatibility
                      br
                      small Initially used Node.js 18, but Vite 7.0.6 required Node.js 20
                    li.mb-2
                      i.bi.bi-2-circle.text-warning.me-2
                      strong Dependency Resolution
                      br
                      small React Native Web's peer dependencies conflicted with React 18
                    li.mb-2
                      i.bi.bi-3-circle.text-warning.me-2
                      strong Build Information in CI/CD
                      br
                      small Ensuring git information was available during build
                    li.mb-2
                      i.bi.bi-4-circle.text-warning.me-2
                      strong Static Asset Handling
                      br
                      small Documentation files weren't being served properly

            .col-md-6
              .card.h-100.border-success
                .card-header.bg-success.text-white
                  h6.mb-0
                    i.bi.bi-check-circle.me-2
                    | Solutions Implemented
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      strong Upgraded to Node.js 20
                      br
                      small For optimal Vite performance and crypto module support
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      strong --legacy-peer-deps Flag
                      br
                      small Used in both development and CI/CD for compatibility
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      strong fetch-depth: 0
                      br
                      small In checkout action for complete git history
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      strong Cross-Platform Scripts
                      br
                      small Node.js scripts instead of shell commands

        // SEO and Performance Section
        section#seo-performance.mb-5
          h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
            i.bi.bi-speedometer2.me-2
            | SEO Optimization and Performance

          h4.h4.text-secondary.mb-3 Search Engine Optimization Strategy

          p As someone who builds web applications professionally, SEO was a critical consideration. The HTML meta tags were carefully crafted for maximum search visibility:

          .card.border-0.shadow-sm.mb-4
            .card-body
              .bg-dark.text-light.p-3.rounded
                h6.text-warning.mb-3
                  i.bi.bi-file-code.me-2
                  | SEO Meta Tags Implementation
                pre.text-light.mb-0: code.
                  &lt;!-- SEO Meta Tags --&gt;
                  &lt;title&gt;React Native Web Vite Starter - Cross-Platform Development Template&lt;/title&gt;
                  &lt;meta name="description" content="Production-ready React Native Web starter template with Vite, TypeScript, and automated deployment." /&gt;
                  &lt;meta name="keywords" content="react native web, vite, typescript, cross-platform" /&gt;

                  &lt;!-- Open Graph Tags --&gt;
                  &lt;meta property="og:title" content="React Native Web Vite Starter" /&gt;
                  &lt;meta property="og:description" content="Production-ready starter template for cross-platform applications" /&gt;
                  &lt;meta property="og:type" content="website" /&gt;

          h4.h4.text-secondary.mb-3 Performance Optimization Strategies

          .row.g-4
            .col-md-6
              .card.h-100.border-info
                .card-header.bg-info.text-white
                  h6.mb-0
                    i.bi.bi-lightning.me-2
                    | Code Optimization
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-arrow-right.text-info.me-2
                      strong Code Splitting
                      br
                      small Lazy loading for better performance
                    li.mb-2
                      i.bi.bi-arrow-right.text-info.me-2
                      strong Bundle Analysis
                      br
                      small Vite's built-in analyzer for optimization
                    li.mb-2
                      i.bi.bi-arrow-right.text-info.me-2
                      strong Tree Shaking
                      br
                      small Automatic dead code elimination

            .col-md-6
              .card.h-100.border-success
                .card-header.bg-success.text-white
                  h6.mb-0
                    i.bi.bi-images.me-2
                    | Asset Optimization
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-arrow-right.text-success.me-2
                      strong SVG Icons
                      br
                      small Vector graphics instead of raster images
                    li.mb-2
                      i.bi.bi-arrow-right.text-success.me-2
                      strong Font Loading
                      br
                      small Optimized web font delivery
                    li.mb-2
                      i.bi.bi-arrow-right.text-success.me-2
                      strong Intelligent Caching
                      br
                      small Documentation service caching strategy

        // Lessons Learned Section
        section#lessons-learned.mb-5
          h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
            i.bi.bi-mortarboard.me-2
            | Lessons Learned and Best Practices

          h4.h4.text-secondary.mb-3 Technical Insights

          .row.g-4.mb-4
            .col-lg-6
              .card.h-100.border-primary
                .card-header.bg-primary.text-white
                  h6.mb-0
                    i.bi.bi-lightbulb.me-2
                    | Key Insights
                .card-body
                  .accordion(id="insightsAccordion")
                    .accordion-item
                      h6.accordion-header(id="insight1")
                        button.accordion-button.collapsed(type="button" data-bs-toggle="collapse" data-bs-target="#collapse1")
                          | 1. Dependency Management is Critical
                      #collapse1.accordion-collapse.collapse(data-bs-parent="#insightsAccordion")
                        .accordion-body
                          p.small Modern JavaScript ecosystems are complex. Using #[code --legacy-peer-deps] isn't ideal, but sometimes necessary for compatibility. Always document these decisions.

                    .accordion-item
                      h6.accordion-header(id="insight2")
                        button.accordion-button.collapsed(type="button" data-bs-toggle="collapse" data-bs-target="#collapse2")
                          | 2. Cross-Platform Requires Platform-Specific Thinking
                      #collapse2.accordion-collapse.collapse(data-bs-parent="#insightsAccordion")
                        .accordion-body
                          p.small While "write once, run everywhere" is the goal, each platform has unique requirements. Build abstractions that handle these differences gracefully.

                    .accordion-item
                      h6.accordion-header(id="insight3")
                        button.accordion-button.collapsed(type="button" data-bs-toggle="collapse" data-bs-target="#collapse3")
                          | 3. CI/CD Pipelines Need Extensive Testing
                      #collapse3.accordion-collapse.collapse(data-bs-parent="#insightsAccordion")
                        .accordion-body
                          p.small What works locally doesn't always work in CI/CD. Test your deployment pipeline thoroughly across different environments.

            .col-lg-6
              .card.h-100.border-success
                .card-header.bg-success.text-white
                  h6.mb-0
                    i.bi.bi-check-circle.me-2
                    | Architecture Patterns That Worked
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-3
                      strong
                        i.bi.bi-diagram-3.text-success.me-2
                        | Service Layer Pattern
                      br
                      small Abstracting API calls and platform-specific logic into services made the codebase maintainable
                    li.mb-3
                      strong
                        i.bi.bi-gear.text-success.me-2
                        | Configuration-Driven Development
                      br
                      small Using configuration objects instead of hardcoded values made the application adaptable
                    li.mb-3
                      strong
                        i.bi.bi-arrow-up.text-success.me-2
                        | Progressive Enhancement
                      br
                      small Building core functionality first, then adding platform-specific enhancements

          .alert.alert-danger.border-start.border-4.border-danger
            h5.alert-heading
              i.bi.bi-exclamation-triangle.me-2
              | Mistakes to Avoid
            .row
              .col-md-4
                h6.text-danger
                  i.bi.bi-x-circle.me-2
                  | Premature Optimization
                p.small Don't optimize for performance before establishing functionality. Get it working, then make it fast.
              .col-md-4
                h6.text-danger
                  i.bi.bi-x-circle.me-2
                  | Ignoring Platform Differences
                p.small Platform differences aren't just UI concerns. Navigation, file system access, and networking all vary.
              .col-md-4
                h6.text-danger
                  i.bi.bi-x-circle.me-2
                  | Insufficient Error Handling
                p.small Production applications need robust error handling, especially for network requests.

        // Future Section
        section#future.mb-5
          h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
            i.bi.bi-rocket.me-2
            | The Future: What's Next

          h4.h4.text-secondary.mb-3 Planned Enhancements

          .row.g-4.mb-4
            .col-md-6
              .card.h-100.border-info
                .card-header.bg-info.text-white
                  h6.mb-0
                    i.bi.bi-phone.me-2
                    | Mobile & Testing
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-check2.text-info.me-2
                      strong Mobile Platform Integration
                      br
                      small Full iOS and Android builds with native features
                    li.mb-2
                      i.bi.bi-check2.text-info.me-2
                      strong Automated Testing Suite
                      br
                      small Jest, Playwright for comprehensive testing
                    li.mb-2
                      i.bi.bi-check2.text-info.me-2
                      strong Performance Monitoring
                      br
                      small Real-time application performance tracking

            .col-md-6
              .card.h-100.border-success
                .card-header.bg-success.text-white
                  h6.mb-0
                    i.bi.bi-layers.me-2
                    | Architecture & APIs
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-check2.text-success.me-2
                      strong State Management
                      br
                      small Redux Toolkit or Zustand for complex scenarios
                    li.mb-2
                      i.bi.bi-check2.text-success.me-2
                      strong API Integration Examples
                      br
                      small Comprehensive API integration patterns
                    li.mb-2
                      i.bi.bi-check2.text-success.me-2
                      strong Community Contributions
                      br
                      small Enhanced documentation and contribution guidelines

          h4.h4.text-secondary.mb-3 Enterprise Adoption

          .alert.alert-info.border-start.border-4.border-info
            p.mb-0 Based on patterns successful in WebSpark and other production applications, the project incorporates scalable architecture patterns, security best practices, performance optimization techniques, and comprehensive monitoring and logging.

        // Conclusion Section
        section#conclusion.mb-5
          h2.h2.text-primary.border-bottom.border-primary.pb-2.mb-4
            i.bi.bi-flag-fill.me-2
            | Conclusion

          .card.bg-light.border-0.shadow-sm.mb-4
            .card-body
              blockquote.blockquote.text-center.mb-0.
                Building react-native-web-start was more than creating another starter template – it was about establishing enterprise-grade patterns for cross-platform development.

          p.lead.
            The journey from initial git commit to production deployment revealed the complexities of modern web development:
            dependency management challenges, CI/CD pipeline intricacies, cross-platform compatibility issues,
            and the critical importance of comprehensive documentation.

          .row.g-4.mb-4
            .col-md-6
              .card.border-primary.h-100
                .card-header.bg-primary.text-white
                  h6.mb-0
                    i.bi.bi-trophy.me-2
                    | Key Achievements
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Enterprise-grade cross-platform foundation
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Production-ready CI/CD pipeline
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Comprehensive documentation system
                    li.mb-2
                      i.bi.bi-check-circle.text-success.me-2
                      | Modern tooling with Vite and TypeScript

            .col-md-6
              .card.border-info.h-100
                .card-header.bg-info.text-white
                  h6.mb-0
                    i.bi.bi-lightbulb.me-2
                    | Knowledge Shared
                .card-body
                  ul.list-unstyled.mb-0
                    li.mb-2
                      i.bi.bi-book.text-info.me-2
                      | Complete development journey documentation
                    li.mb-2
                      i.bi.bi-book.text-info.me-2
                      | Troubleshooting guides for common issues
                    li.mb-2
                      i.bi.bi-book.text-info.me-2
                      | Best practices for cross-platform development
                    li.mb-2
                      i.bi.bi-book.text-info.me-2
                      | Real-world production experience insights

          p The project demonstrates that with careful planning, proper tooling, and attention to detail, it's possible to create applications that truly work across all platforms without compromising code quality or developer experience.

          p Every challenge overcome – from React dependency conflicts to GitHub Pages deployment issues – was documented not just for troubleshooting, but as knowledge for the broader development community. This transparency and attention to detail transforms a simple starter template into a valuable resource for developers worldwide.

        .card.border-primary.border-2.bg-light.mb-5
          .card-body.text-center.py-5
            h3.card-title.text-primary.mb-3
              i.bi.bi-download.me-2
              | Get Started with React-native-web-start
            p.card-text.lead.mb-4 Ready to build your own cross-platform application? Clone the repository and start developing today!

            .d-flex.flex-wrap.justify-content-center.gap-3
              a.btn.btn-primary.btn-lg(href="https://github.com/markhazleton/react-native-web-start" target="_blank")
                i.bi.bi-github.me-2
                | View on GitHub
              a.btn.btn-success.btn-lg(href="https://markhazleton.github.io/react-native-web-start" target="_blank")
                i.bi.bi-eye.me-2
                | Live Demo
              a.btn.btn-outline-secondary.btn-lg(href="https://github.com/markhazleton/react-native-web-start/archive/refs/heads/main.zip")
                i.bi.bi-download.me-2
                | Download ZIP

