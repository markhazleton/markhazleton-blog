extends ../layouts/modern-layout

block layout-content
  br
  article#main-article.py-5
    .container
      .row.justify-content-center
        .col-12.col-lg-10
          header.text-center.mb-5
            h1.display-4.fw-bold.text-primary
              i.bi.bi-github.me-3(aria-hidden='true')
              | Automating GitHub Profile
            p.h3.text-muted.mb-4 Streamline Your Workflow by Automatically Updating Your GitHub Profile with Latest Blog Posts

            .card.border-primary.mb-4
              .card-body.text-center
                i.bi.bi-code-slash.text-primary.me-2(aria-hidden='true')
                a.fw-bold.text-primary(href='https://github.com/markhazleton/markhazleton' target="_blank" rel="noopener noreferrer" title='The full source code for GitHub Action is available on GitHub') The full source code for GitHub Action is available on GitHub

          // Introduction Section
          .card.shadow-sm.mb-4
            .card-body
              h2.card-title
                i.bi.bi-info-circle.text-primary.me-2(aria-hidden='true')
                | Introduction
              .card-text
                p As a developer, I'm always looking for ways to streamline my workflow and share my latest work more effectively. Recently, I updated my blog at markhazleton.com to include an RSS feed using some updated Node.js programming. With this feed in place, I decided to automate the process of displaying my latest blog posts on my GitHub profile using GitHub Actions.
                p In this post, I'll quickly review the steps I took to create the RSS feed and set up the GitHub Action to update my profile with the most recent blog posts.

          // GitHub Profile Preview
          .card.shadow-sm.mb-4
            .card-header.bg-primary.text-white
              h2.card-title.mb-0
                i.bi.bi-person-circle.me-2(aria-hidden='true')
                | GitHub Profile Preview
            .card-body.text-center
              a.d-block(href='https://github.com/markhazleton' target="_blank" rel="noopener noreferrer" title='GitHub Profile for Mark Hazleton')
                img.img-fluid.rounded.shadow(src='/assets/img/MarkHazleton-GitHub-Profile.png' alt='GitHub Profile' title='GitHub Profile')

          // Implementation Process
          .card.shadow-sm.mb-4
            .card-header.bg-success.text-white
              h2.card-title.mb-0
                i.bi.bi-gear-fill.me-2(aria-hidden='true')
                | Implementation Process
            .card-body
              .accordion#implementationAccordion

                // Creating RSS Feed
                .accordion-item
                  h3.accordion-header#headingRss
                    button.accordion-button(type='button' data-bs-toggle='collapse' data-bs-target='#collapseRss' aria-expanded='true' aria-controls='collapseRss')
                      i.bi.bi-rss.text-warning.me-2(aria-hidden='true')
                      strong Creating the RSS Feed with Blog Admin Tool
                  .accordion-collapse.collapse.show#collapseRss(aria-labelledby='headingRss' data-bs-parent='#implementationAccordion')
                    .accordion-body
                      p To create an RSS feed, I updated my Blog Admin tool to create an XML file with the latest blog posts whenever a new article is published.

                      .alert.alert-info
                        i.bi.bi-info-circle.me-2(aria-hidden='true')
                        | For more information about the Blog Admin tool, check out my previous post
                        a(href="https://markhazleton.com/articles/building-a-web-application-to-manage-your-blog-articles.html" target="_blank" rel="noopener noreferrer" title="Building a Web Application to Manage Your Blog Articles") Building a Web Application to Manage Your Blog Articles

                      p Here is the updated code snippet from the Blog Admin tool that generates the RSS feed:

                      pre.language-csharp.bg-light.p-3.rounded
                        code.language-csharp.
                          public void GenerateRSSFeed()
                          {
                            try
                            {
                              string rssFeedPath = Path.Combine(Path.GetDirectoryName(_filePath), "rss.xml");
                              var recentArticles = _articles.OrderByDescending(a => ConvertStringToDate(a.LastModified)).Take(10).ToList();
                              using (XmlWriter writer = XmlWriter.Create(rssFeedPath, new XmlWriterSettings { Indent = true }))
                              {
                                writer.WriteStartDocument();
                                writer.WriteStartElement("rss");
                                writer.WriteAttributeString("version", "2.0");

                                writer.WriteStartElement("channel");
                                writer.WriteElementString("title", "Mark Hazleton Articles");
                                writer.WriteElementString("link", "https://markhazleton.com/");
                                writer.WriteElementString("description", "Latest articles from Mark Hazleton.");
                                writer.WriteElementString("lastBuildDate", DateTime.Now.ToString("r"));

                                foreach (var article in recentArticles)
                                {
                                  writer.WriteStartElement("item");
                                  writer.WriteElementString("title", article.Name);
                                  writer.WriteElementString("link", $"https://markhazleton.com/{article.Slug}");
                                  writer.WriteElementString("description", article.Description);
                                  writer.WriteElementString("pubDate", ConvertStringToDate(article.LastModified).ToString("r"));
                                  writer.WriteEndElement();
                                }

                                writer.WriteEndElement(); // channel
                                writer.WriteEndElement(); // rss
                                writer.WriteEndDocument();
                              }
                              _logger.LogInformation("RSS feed generated successfully.");
                            }
                            catch (Exception ex)
                            {
                              _logger.LogError(ex, "Failed to generate RSS feed.");
                            }
                          }

                // Setting Up GitHub Action
                .accordion-item
                  h3.accordion-header#headingAction
                    button.accordion-button.collapsed(type='button' data-bs-toggle='collapse' data-bs-target='#collapseAction' aria-expanded='false' aria-controls='collapseAction')
                      i.bi.bi-github.text-dark.me-2(aria-hidden='true')
                      strong Setting Up the GitHub Action
                  .accordion-collapse.collapse#collapseAction(aria-labelledby='headingAction' data-bs-parent='#implementationAccordion')
                    .accordion-body
                      p With the RSS feed in place, I created a GitHub Action in my profile repository (#[code github.com/markhazleton/markhazleton]). This action fetches the latest posts from my blog's RSS feed and updates my profile README with the top five articles.

                      .row.g-3
                        .col-md-6
                          .card.border-info.h-100
                            .card-header.bg-info.text-white
                              i.bi.bi-clock.me-2(aria-hidden='true')
                              strong Daily Automation
                            .card-body
                              p.card-text The Action runs every day at midnight (UTC) and can also be triggered manually. I used the the #[code cron] schedule to run the workflow at a specific time each day. So each night at midnight, the workflow fetches the latest blog posts and updates my profile README.

                        .col-md-6
                          .card.border-warning.h-100
                            .card-header.bg-warning.text-dark
                              i.bi.bi-code-slash.me-2(aria-hidden='true')
                              strong XML Parsing
                            .card-body
                              p.card-text It installs #[code xmlstarlet], a command-line XML tool, to parse the RSS feed.

                      .row.g-3.mt-2
                        .col-md-6
                          .card.border-success.h-100
                            .card-header.bg-success.text-white
                              i.bi.bi-download.me-2(aria-hidden='true')
                              strong Fetch Posts
                            .card-body
                              p.card-text It fetches the top five latest blog posts from my RSS feed using #[code curl] and #[code xmlstarlet] and saves them to a file called #[code latest-posts.md].

                        .col-md-6
                          .card.border-primary.h-100
                            .card-header.bg-primary.text-white
                              i.bi.bi-file-earmark-text.me-2(aria-hidden='true')
                              strong Update README
                            .card-body
                              p.card-text It then updates the #[code README.md] by replacing the content between the #[code <!-- BLOG-POST-LIST:START -->] and #[code <!-- BLOG-POST-LIST:END -->] tags with the new posts.

                      .row.g-3.mt-2
                        .col-12
                          .card.border-secondary
                            .card-header.bg-secondary.text-white
                              i.bi.bi-git.me-2(aria-hidden='true')
                              strong Commit Changes
                            .card-body
                              p.card-text If the #[code README.md] has been updated, it commits and pushes the changes back to the repository.

                      .mt-4
                        p Here's the full GitHub Action workflow file that I used to automate my GitHub profile updates with the latest blog posts:

                        pre.language-yml.bg-light.p-3.rounded
                          code.language-yml.
                            name: Update README with Latest Blog Posts
                            on:
                              schedule:
                                # Runs at 12:00 AM UTC every day
                                - cron: '0 0 * * *'
                                workflow_dispatch: # Allows manual trigger of the workflow
                            jobs:
                              update-readme:
                                runs-on: ubuntu-latest

                                steps:
                                - name: Checkout Repository
                                  uses: actions/checkout@v3

                                - name: Install xmlstarlet
                                  run: sudo apt-get install -y xmlstarlet

                                - name: Fetch Latest Blog Posts
                                  id: fetch_blog_posts
                                  run: |
                                    # Fetch the latest blog posts from the RSS feed
                                    curl -s https://markhazleton.com/rss.xml | xmlstarlet sel -t -m '//item' \
                                    -v 'concat("- [", title, "](", link, ")")' -n | head -5 > latest-posts.md

                                - name: Update README.md
                                  run: |
                                    # Read the latest posts into a variable
                                    latest_posts=$(<latest-posts.md)

                                    # Replace the content between the <!-- BLOG-POST-LIST:START --> and <!-- BLOG-POST-LIST:END --> tags
                                    awk -v latest_posts="$latest_posts" '
                                    BEGIN {in_blog_list=0}
                                    /<!-- BLOG-POST-LIST:START -->/ {print; print latest_posts; in_blog_list=1; next}
                                    /<!-- BLOG-POST-LIST:END -->/ {print; in_blog_list=0; next}
                                    !in_blog_list {print}
                                    ' README.md > updated_readme.md

                                - name: Check if README.md was updated
                                  id: check_changes
                                  run: |
                                    # Compare updated README.md with the current one
                                    if ! diff updated_readme.md README.md > /dev/null; then
                                      mv updated_readme.md README.md
                                      echo "changes_detected=true" >> $GITHUB_ENV
                                    else
                                      echo "README.md is up to date. No changes needed."
                                      echo "changes_detected=false" >> $GITHUB_ENV
                                      exit 0
                                    fi

                                - name: Clean up untracked files
                                  run: |
                                    rm -f latest-posts.md updated_readme.md

                                - name: Commit Changes
                                  if: env.changes_detected == 'true'
                                  run: |
                                    git config --global user.name "github-actions[bot]"
                                    git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
                                    git add README.md
                                    git commit -m "Updated README with latest blog posts"
                                    git push

                // Testing and Troubleshooting
                .accordion-item
                  h3.accordion-header#headingTesting
                    button.accordion-button.collapsed(type='button' data-bs-toggle='collapse' data-bs-target='#collapseTesting' aria-expanded='false' aria-controls='collapseTesting')
                      i.bi.bi-bug.text-danger.me-2(aria-hidden='true')
                      strong Testing and Troubleshooting
                  .accordion-collapse.collapse#collapseTesting(aria-labelledby='headingTesting' data-bs-parent='#implementationAccordion')
                    .accordion-body
                      p After setting up the workflow, I ran it manually to ensure it worked as expected. There were a few issues initially with XML parsing and formatting, but those were resolved by tweaking the #[code xmlstarlet] command and the #[code awk] script used for replacing the content in the README.

                      .alert.alert-warning
                        h5.alert-heading
                          i.bi.bi-exclamation-triangle.me-2(aria-hidden='true')
                          | Runtime Errors and Warnings
                        p Initially, the GitHub Action ran into a couple of issues. The first problem occurred when there were no changes detected in the README.md file, causing the workflow to fail with the message: #[strong nothing added to commit but untracked files present]. This happened because git attempted to commit even when there was nothing to change.
                        hr
                        p To solve this, I added a conditional check before the commit step. I used #[code diff] to compare the current and updated versions of README.md, and only moved forward with the commit when actual changes were detected.
                        p The second issue was related to a deprecation warning about the #[code set-output] command, which is now outdated and replaced by GitHub's environment files for setting output variables. I refactored the action to use environment files, appending the detected changes to #[code $GITHUB_ENV]. This new method ensures the workflow is future-proof and adheres to GitHub's latest standards for workflow outputs, eliminating both the error and the warning.

          // Final Thoughts Section
          .card.shadow-sm.mb-4
            .card-header.bg-info.text-white
              h2.card-title.mb-0
                i.bi.bi-lightbulb.me-2(aria-hidden='true')
                | Final Thoughts
            .card-body
              p This GitHub Action has been a great way to keep my GitHub profile updated with my latest content automatically. It not only showcases my recent work but also saves me the hassle of manually updating my profile. If you're looking to automate your GitHub profile or any other repetitive task, I highly recommend giving GitHub Actions a try.

              .alert.alert-success.mt-3
                i.bi.bi-chat-dots.me-2(aria-hidden='true')
                | If you have any questions or run into issues setting up a similar workflow, feel free to reach out. I'd be happy to help!
