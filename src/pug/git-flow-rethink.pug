extends layouts/modern-layout

block variables
  - var pageTitle = 'Git Flow Rethink: Reevaluating Continuous in CI/CD'
  - var pageDescription = 'Rethinking Git Flow branching for modern DevOps. Explore single-branch strategies, CI/CD integration, and how to evolve from traditional Git Flow to streamlined development workflows.'
  - var pageKeywords = 'Git Flow, DevOps, CI/CD, Continuous Integration, Branch Strategy, Single Branch, Azure DevOps, GitHub, GitLab, Software Development, Mark Hazleton'
  - var pageCanonical = 'https://markhazleton.com/git-flow-rethink.html'

block pagehead
  title= pageTitle + ' | Mark Hazleton'
  meta(name='description', content=pageDescription)
  meta(name='keywords', content=pageKeywords)

block og_overrides
  meta(property='og:title', content=pageTitle)
  meta(property='og:description', content=pageDescription)
  meta(property='og:url', content=pageCanonical)
  meta(property='og:type', content='article')

block twitter_overrides
  meta(name='twitter:card', content='summary_large_image')
  meta(name='twitter:title', content=pageTitle)
  meta(name='twitter:description', content=pageDescription)

block canonical
  link(rel='canonical', href=pageCanonical)

block layout-content
  // Hero Section
  section.bg-gradient-primary.py-5
    .container
      .row.align-items-center
        .col-lg-10.mx-auto.text-center
          h1.display-4.fw-bold.mb-3
            i.bi.bi-git.me-3
            | Git Flow Rethink
          h2.h3.mb-4 Reevaluating the Meaning of Continuous in CI/CD
          p.lead.mb-5 Evolving from traditional Git Flow to modern DevOps practices with single-branch strategies and automated tooling for streamlined development workflows.

  // Main Article
  article#main-article
    .container
      .row
        .col-lg-8.mx-auto
          header.mb-5
            .article-meta.text-muted.mb-4
              time(datetime='2025-05-30') May 30, 2025
              span.mx-2 •
              span 8 min read
              span.mx-2 •
              span by Mark Hazleton

          // Table of Contents
          nav.mb-5(aria-label='Table of Contents')
            .card.shadow-sm
              .card-header.bg-primary.text-white
                h3.mb-0
                  i.bi.bi-list-ul.me-2
                  | Contents
              .card-body
                ol.list-group.list-group-numbered.list-group-flush
                  li.list-group-item
                    a.text-decoration-none(href='#introduction') Introduction & Evolution
                  li.list-group-item
                    a.text-decoration-none(href='#git-flow-recap') Git Flow Recap
                  li.list-group-item
                    a.text-decoration-none(href='#rethinking') Rethinking Git Flow
                  li.list-group-item
                    a.text-decoration-none(href='#challenges') Git Flow Challenges
                  li.list-group-item
                    a.text-decoration-none(href='#single-branch') Single Permanent Branch Strategy
                  li.list-group-item
                    a.text-decoration-none(href='#modern-tools') Modern DevOps Tooling
                  li.list-group-item
                    a.text-decoration-none(href='#conclusion') Conclusion

          // Introduction Section
          section#introduction.mb-5
            h2.h3.mb-4
              i.bi.bi-clock-history.me-2
              | Introduction & Evolution

            p.lead As a developer with years of experience embracing Git Flow branching methodology, I've witnessed its value in providing structure and clarity for version control and team collaboration. However, the rapid evolution of software development and DevOps demands a fresh perspective.

            .alert.alert-info.mb-4
              .d-flex.align-items-start
                i.bi.bi-lightbulb.me-3.fs-4.text-info
                div
                  h5.alert-heading The Challenge
                  p.mb-0 How do we adapt and evolve our practices to leverage modern DevOps efficiencies while preserving the wisdom gained from years of Git Flow experience?

            p The challenge isn't about discarding proven principles but rather leveraging accumulated wisdom to harness today's DevOps capabilities. Instead of starting anew, we can build upon our foundation to create more efficient workflows.

          // Git Flow Recap Section
          section#git-flow-recap.mb-5
            h2.h3.mb-4
              i.bi.bi-diagram-2.me-2
              | Git Flow Recap

            .card.border-primary.mb-4
              .card-header.bg-primary.text-white
                h4.mb-0
                  i.bi.bi-info-circle.me-2
                  | Git Flow Background
              .card-body
                p The Git Flow branching methodology, created by Vincent Driessen in his influential blog post
                  a.text-decoration-none(href='https://nvie.com/posts/a-successful-git-branching-model/' target='_blank' rel='noopener noreferrer')
                    | "A successful Git branching model"
                    i.bi.bi-box-arrow-up-ne.ms-1
                  | , has been widely adopted as the formal approach to managing code changes.

                p Its structured workflow provided clear version control and collaboration guidelines, serving as my go-to branching model for many years. However, as we embrace continuous integration and deployment, some Git Flow aspects introduce unnecessary ceremony.

                .alert.alert-warning.border-left-warning.mt-3
                  .d-flex.align-items-start
                    i.bi.bi-exclamation-triangle.me-3.text-warning
                    div
                      h6.fw-bold Vincent Driessen's Update
                      blockquote.mb-0.fst-italic "If your team is doing continuous delivery of software, I would suggest adopting a much simpler workflow instead of trying to shoehorn git-flow into your team."

          // Rethinking Section
          section#rethinking.mb-5
            h2.h3.mb-4
              i.bi.bi-arrows-angle-expand.me-2
              | Rethinking Git Flow

            p.mb-4 I propose taking a fresh perspective on Git Flow branching strategy. Let's explore enhancing our processes without forsaking our established foundation.

            .row.g-4.mb-4
              .col-md-6
                .card.border-success.h-100
                  .card-header.bg-success.text-white
                    h5.mb-0
                      i.bi.bi-check-circle.me-2
                      | What's Working
                  .card-body
                    ul.mb-0
                      li Strong foundation and structure
                      li Clear communication patterns
                      li Team collaboration guidelines
                      li Quality assurance measures
                      li Version control clarity

              .col-md-6
                .card.border-warning.h-100
                  .card-header.bg-warning.text-white
                    h5.mb-0
                      i.bi.bi-gear.me-2
                      | What Needs Evolution
                  .card-body
                    ul.mb-0
                      li Excessive ceremony for simple projects
                      li Manual processes and policies
                      li DevOps tooling misalignment
                      li Inconsistent branch protection
                      li Production visibility challenges

            p A pivotal shift has been embracing continuous integration and deployment (CI/CD) practices. By leveraging CI/CD potential, we can streamline workflows while maintaining quality assurance—a delicate balance integrating Git Flow strengths with contemporary tooling capabilities.

            .alert.alert-primary.border-primary
              .d-flex.align-items-start
                i.bi.bi-question-circle.me-3.fs-4.text-primary
                div
                  h5.alert-heading Key Questions
                  p.mb-0 After years of using Git Flow, I had to ask: Is it the best branching model for my team, or am I following it simply because it's how I've always done it?

          // Challenges Section
          section#challenges.mb-5
            h2.h3.mb-4
              i.bi.bi-exclamation-triangle.me-2
              | Git Flow Challenges in Modern DevOps

            p.mb-4 Through experience and team discussions, several challenges with Git Flow have become apparent, particularly regarding permanent development and main branches with release merges:

            .row.g-4.mb-4
              .col-lg-4
                .card.border-danger.h-100
                  .card-header.bg-danger.text-white
                    h5.mb-0
                      i.bi.bi-shield-exclamation.me-2
                      | Branch Policies
                  .card-body
                    .mb-3
                      h6.fw-bold The Problem
                      p.small.text-muted Temporary branch protection challenges
                    p.small In Git Flow, temporary branches like release and hotfix branches are crucial, but implementing branch policies poses challenges in platforms like Azure DevOps.
                    p.small.mb-0 Manual application of default branch attributes can result in temporary branches lacking the same protection as permanent branches.

              .col-lg-4
                .card.border-warning.h-100
                  .card-header.bg-warning.text-white
                    h5.mb-0
                      i.bi.bi-search.me-2
                      | Production Visibility
                  .card-body
                    .mb-3
                      h6.fw-bold The Problem
                      p.small.text-muted Determining production state
                    p.small Traditional Git Flow makes it difficult to identify what's in production by examining the repository alone.
                    p.small Temporary branches often remain open after deployment, creating ambiguity about the exact production environment state.
                    p.small.mb-0 This hinders troubleshooting and comprehensive software state understanding.

              .col-lg-4
                .card.border-info.h-100
                  .card-header.bg-info.text-white
                    h5.mb-0
                      i.bi.bi-shield-check.me-2
                      | False Security
                  .card-body
                    .mb-3
                      h6.fw-bold The Problem
                      p.small.text-muted Develop branch vulnerabilities
                    p.small Git Flow's reliance on develop and main branches creates false security. Any commit merged into develop eventually reaches main and production.
                    p.small The develop branch requires the same control as main but often becomes a temporary workspace with inconsistent quality controls.
                    p.small.mb-0 Lack of policies on temporary branches complicates code integrity maintenance.

          // Single Branch Section
          section#single-branch.mb-5
            h2.h3.mb-4
              i.bi.bi-arrow-down-up.me-2
              | A Single Permanent Branch Strategy

            .alert.alert-success.border-success.mb-4
              .d-flex.align-items-start
                i.bi.bi-lightbulb.me-3.fs-4.text-success
                div
                  h5.alert-heading The Solution
                  p.mb-0 An alternative approach gaining momentum: adopting a single-branch strategy using one branch for all pull requests, streamlining development and simplifying codebase management.

            p.mb-4 But how can this single-branch approach overcome Git Flow weaknesses while ensuring efficient, controlled development? The answer lies in leveraging modern DevOps tooling power.

            p The tooling available today provides robust automation capabilities that offset the manual processes traditionally required in Git Flow. Let's explore how these tools address weaknesses and enhance single-branch efficiency.

          // Modern Tools Section
          section#modern-tools.mb-5
            h2.h3.mb-4
              i.bi.bi-tools.me-2
              | Modern DevOps Tooling Advantages

            .row.g-4.mb-4
              .col-md-4
                .card.border-primary.h-100
                  .card-header.bg-primary.text-white
                    h5.mb-0
                      i.bi.bi-shield-check.me-2
                      | Automated Policies
                  .card-body
                    p.small DevOps platforms (Azure DevOps, GitHub, GitLab) offer automated branch policies.
                    ul.small
                      li Code review enforcement
                      li Automated unit testing
                      li Quality check integration
                      li Pull request validation
                    p.small.mb-0 Configure these on your permanent branch while developers focus on coding.

              .col-md-4
                .card.border-success.h-100
                  .card-header.bg-success.text-white
                    h5.mb-0
                      i.bi.bi-arrow-repeat.me-2
                      | CI/CD Pipelines
                  .card-body
                    p.small Modern CI/CD provides seamless version control integration with automated triggers.
                    ul.small
                      li Automated builds and tests
                      li Multi-environment deployment
                      li Rapid feedback loops
                      li Early issue identification
                    p.small.mb-0 Continuous integration, validation, and deployment from a single branch.

              .col-md-4
                .card.border-info.h-100
                  .card-header.bg-info.text-white
                    h5.mb-0
                      i.bi.bi-tags.me-2
                      | Smart Versioning
                  .card-body
                    p.small Configure automatic version incrementation on every build.
                    ul.small
                      li Assembly version tracking
                      li Build timestamp identification
                      li Production state clarity
                      li Automated tagging and releases
                    p.small.mb-0 Easily determine production contents and track releases effectively.

            .card.border-success.mb-4
              .card-header.bg-success.text-white
                h4.mb-0
                  i.bi.bi-trophy.me-2
                  | Benefits of Modern Approach
              .card-body
                .row.g-3
                  .col-md-6
                    h6.fw-bold
                      i.bi.bi-check-circle.me-2
                      | Process Optimization
                    ul.small
                      li Automated quality controls
                      li Reduced manual intervention
                      li Streamlined workflows
                      li Enhanced team productivity

                  .col-md-6
                    h6.fw-bold
                      i.bi.bi-speedometer2.me-2
                      | Development Speed
                    ul.small
                      li Faster value delivery
                      li Maintained code quality
                      li Simplified release management
                      li Improved collaboration

          // Conclusion Section
          section#conclusion.mb-5
            h2.h3.mb-4
              i.bi.bi-check-circle.me-2
              | Conclusion: Embracing Modern Development

            .row.g-4.mb-4
              .col-md-6
                .card.border-success.h-100
                  .card-header.bg-success.text-white
                    h5.mb-0
                      i.bi.bi-award.me-2
                      | Key Benefits
                  .card-body
                    ul.mb-0
                      li Optimized development processes
                      li Mitigated Git Flow weaknesses
                      li Automated quality enforcement
                      li Streamlined production visibility
                      li Enhanced team productivity

              .col-md-6
                .card.border-primary.h-100
                  .card-header.bg-primary.text-white
                    h5.mb-0
                      i.bi.bi-lightbulb.me-2
                      | Innovation Opportunities
                  .card-body
                    ul.mb-0
                      li Team innovation acceleration
                      li Enhanced collaboration
                      li Reduced complexity overhead
                      li Focus on software quality
                      li Rapid delivery capabilities

            p.lead.text-center.mb-4 The single-branch approach, powered by modern DevOps tooling, becomes a powerful strategy for efficient, controlled software development.

            .alert.alert-primary.border-primary
              .d-flex.align-items-start
                i.bi.bi-rocket.me-3.fs-4.text-primary
                div
                  h5.alert-heading Final Thoughts
                  p.mb-2 This Git Flow rethink opens new possibilities for teams to innovate, collaborate, and accelerate development processes. It liberates developers from unnecessary complexities, allowing them to concentrate on what truly matters—building great software.
                  p.mb-0 By embracing advancement in DevOps tooling, we can maintain the principles that made Git Flow successful while adapting to modern development realities.

