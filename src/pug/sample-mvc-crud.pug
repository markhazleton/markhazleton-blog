extends layouts/modern-layout


block layout-content
  // Hero Section
  section.bg-gradient-primary.py-5
    .container
      .row.align-items-center
        .col-lg-10.mx-auto.text-center
          h1.display-4.fw-bold.mb-3
            i.bi.bi-code-square.me-3
            | Exploring ASP.NET MVC
          h2.h3.mb-4 CRUD Operations and Modern Development Practices
          p.lead.mb-4.
            Discover a comprehensive "Swiss army knife" project that demonstrates multiple approaches to CRUD operations,
            UI implementations, deployment strategies, and modern DevOps practices in ASP.NET MVC.

          .alert.alert-light.d-flex.align-items-center.justify-content-center.mb-0
            i.bi.bi-github.me-2
            a.fw-bold.text-dark.text-decoration-none(
              href='https://github.com/markhazleton/samplemvccrud/'
              target="_blank"
              rel="noopener noreferrer"
              title='The full source code for SampleMvcCRUD is available on GitHub'
            ) View Full Source Code on GitHub

  // Main Article
  article#main-article
    .container
      .row
        .col-lg-8.mx-auto
          .article-meta.text-muted.mb-4
            time(datetime='2024-05-30') May 30, 2024
            span.mx-2 •
            span 18 min read
            span.mx-2 •
            span by Mark Hazleton

          figure.mb-5.text-center
            a(href='https://github.com/markhazleton/samplemvccrud/' target='_blank' rel='noopener noreferrer')
              img.img-fluid.rounded.shadow(
                src='assets/img/MarkHazleton-SampleMvcCRUD-Home.png'
                alt='SampleMVCCrud Home Page'
                loading='lazy'
              )
            figcaption.text-muted.mt-2.small SampleMvcCRUD Application Home Page

          // Table of Contents
          nav.mb-5(aria-label='Table of Contents')
            .card
              .card-header.bg-primary.text-white
                h3.mb-0
                  i.bi.bi-list-ul.me-2
                  | Contents
              .card-body
                ol.list-group.list-group-numbered.list-group-flush
                  li.list-group-item
                    a.text-decoration-none(href='#overview') Project Overview
                  li.list-group-item
                    a.text-decoration-none(href='#models') The Models & Data Generation
                  li.list-group-item
                    a.text-decoration-none(href='#ui-options') User Interface Options
                  li.list-group-item
                    a.text-decoration-none(href='#features') Advanced Features
                  li.list-group-item
                    a.text-decoration-none(href='#deployment') Deployment Options
                  li.list-group-item
                    a.text-decoration-none(href='#devops') DevOps & Containerization
                  li.list-group-item
                    a.text-decoration-none(href='#conclusion') Conclusion

          // Project Overview Section
          section#overview.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-info.text-white
                h2.card-title.mb-0
                  i.bi.bi-info-circle.me-2
                  | Project Overview
              .card-body
                p.
                  I often find myself trying out new approaches and methods to tackle different challenges.
                  That's where the SampleMvcCRUD project comes in. It has become something of a "Swiss army knife" for me
                  to test out different approaches and to experiment with upgrades to the latest versions of both the .Net Core version
                  and NuGet package versions.

                p.
                  As we know, CRUD operations form the backbone of many applications, and it's essential to have a solid understanding
                  of how to implement them. The SampleMvcCRUD project provides multiple ways of implementing these operations using
                  different approaches in Microsoft .Net.

                p.
                  I wanted to share my experience with a GitHub project to demonstrate ASP.Net MVC
                  applications with <strong>CRUD</strong> – create, read, update, and delete operations.
                  This is a tour of the project, explaining everything from the different approaches
                  used to implement CRUD operations to the various deployment options available.

                .row.g-3.mt-3
                  .col-md-4
                    .card.h-100.text-center.border-primary
                      .card-body
                        i.bi.bi-github.display-6.text-primary.mb-3
                        h5.card-title GitHub Repository
                        p.card-text.small Complete source code and documentation
                        a.btn.btn-outline-primary.btn-sm(
                          href='https://github.com/markhazleton/SampleMvcCRUD'
                          target='_blank'
                          rel='noopener noreferrer'
                        ) View on GitHub

                  .col-md-4
                    .card.h-100.text-center.border-success
                      .card-body
                        i.bi.bi-code-slash.display-6.text-success.mb-3
                        h5.card-title VSCode.dev
                        p.card-text.small Explore code directly in browser
                        a.btn.btn-outline-success.btn-sm(
                          href='https://vscode.dev/github/markhazleton/SampleMvcCRUD'
                          target='_blank'
                          rel='noopener noreferrer'
                        ) Open in VSCode

                  .col-md-4
                    .card.h-100.text-center.border-warning
                      .card-body
                        i.bi.bi-book.display-6.text-warning.mb-3
                        h5.card-title Microsoft Learn
                        p.card-text.small Official ASP.NET documentation
                        a.btn.btn-outline-warning.btn-sm(
                          href='https://dotnet.microsoft.com/en-us/learn/aspnet/what-is-aspnet'
                          target='_blank'
                          rel='noopener noreferrer'                        ) Learn ASP.NET

          // Models & Data Generation Section
          section#models.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-success.text-white
                h2.card-title.mb-0
                  i.bi.bi-database.me-2
                  | The Models & Data Generation
              .card-body
                p.
                  The SampleMvcCRUD project includes a model called Employee that includes Department to show lookup techniques.
                  The model supports an image that can be set for each Employee, and the images are stored on the file system of the application.
                  Additionally, the code generates MOCK sample data so that every time you run the application, you get a different set of data.

                h4.mb-3.text-primary Data Model Interfaces
                pre.language-csharp
                  code.language-csharp.
                    public interface IEmployee
                    {
                      int Age { get; set; }
                      string? Country { get; set; }
                      Department Department { get; set; }
                      int DepartmentId { get; set; }
                      int? ManagerId { get; set; }
                      string Name { get; set; }
                      string? ProfilePicture { get; set; }
                      string? State { get; set; }
                    }
                    public interface IDepartment
                    {
                      string Description { get; set; }
                      ICollection&gt;Employee&lt; Employees { get; set; }
                      string Name { get; set; }
                    }

                .alert.alert-info.mt-4
                  h5.alert-heading
                    i.bi.bi-lightbulb.me-2
                    | Fresh Data Every Time
                  p.mb-0.
                    To get fresh random test data, I used the Bogus library.
                    Bogus is a fake data generator for .NET languages like C#, F#, and VB.NET, and it's a great way to generate sample data
                    for testing purposes. With Bogus, you can quickly create fake data for your application testing needs.

                p.
                  In SampleMvcCRUD, I used the in-memory SQLite database and Bogus to generate fresh test data on every execution of the
                  application. This approach ensures that the application is tested with a different set of data each time it is run,
                  making it easier to identify any potential issues that may arise. By using Bogus, I was able to create realistic-looking data,
                  including names, ages, states, and departments, to simulate a real-world scenario.                h5.mb-3.text-success Data Generation with Bogus
                pre.language-csharp
                  code.language-csharp.
                    public static List&lt;Employee&gt; GetEmployeeList(int generateCount)
                    {
                      var states = new string[] { "Alabama", "Alaska", "Arizona",  };
                      var fakeEmployees = new Faker&lt;Employee&gt;()
                        // Call for objects that have complex initialization
                        .CustomInstantiator(f => new Employee())
                          .RuleFor(u => u.Name, (f, u) => f.Name.FullName())
                          .RuleFor(u => u.Age, f => f.Random.Number(18, 70))
                          .RuleFor(u => u.DepartmentId, f => f.Random.Number(1, 6))
                          .RuleFor(u => u.Country, "USA")
                          .RuleFor(u => u.State, f => f.Random.ListItem(states))
                          .FinishWith((f, u) => { });
                      return fakeEmployees.Generate(generateCount);
                    }

                p.
                  Overall, the Bogus library is a great tool to have in your toolbox as a .NET developer.
                  It can help you generate sample data for testing purposes and ensure that your application is functioning correctly.
                  For more information, check out
                  a.text-decoration-none(href='https://github.com/bchavez/Bogus', target='_blank', rel='noopener noreferrer') the Bogus library on GitHub
                  | .

          // User Interface Options Section
          section#ui-options.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-warning.text-dark
                h2.card-title.mb-0
                  i.bi.bi-layout-text-window-reverse.me-2
                  | User Interface Options
              .card-body
                p.
                  User interface (UI) is the point of interaction between a user and a software application.
                  It includes all the visual and interactive elements of the application that users see and use to interact
                  with the system. In the context of SampleMvcCRUD, the UI is the part of the application that allows users
                  to create, read, update, and delete data from the system.

                .alert.alert-info
                  h5.alert-heading Three Main Approaches
                  p.mb-0.
                    There are three main approaches demonstrated in this project. Each approach should render the same results.
                    These are just different techniques to achieve the same goal.

                p.
                  The choice of the UI implementation approach depends on the specific requirements of the application.
                  If the application requires high interactivity and real-time updates, then the SPA approach may be the best option.
                  If the application requires a clear separation between the presentation layer and the business logic,
                  then the server-side MVC approach may be more appropriate.
                  If the application needs to combine the benefits of both approaches, then the AJAX-based MVC approach may be the best option.

                .row.g-4.mt-3
                  .col-md-6
                    .card.h-100.border-primary
                      .card-header.bg-primary.text-white
                        h5.mb-0
                          i.bi.bi-javascript.me-2
                          | Single JavaScript Page
                      .card-body
                        p.card-text.
                          The first approach is a single JavaScript page that calls the included API endpoints.
                          This approach is perfect for developers who prefer to keep the UI and the backend separate.

                  .col-md-6
                    .card.h-100.border-success
                      .card-header.bg-success.text-white
                        h5.mb-0
                          i.bi.bi-file-earmark-code.me-2
                          | MVC Form Pages
                      .card-body
                        p.card-text.
                          This approach is MVC form pages with a single page (CSHTML) for each controller endpoint.
                          This approach is ideal for developers who want to keep things simple.

                  .col-md-6
                    .card.h-100.border-info
                      .card-header.bg-info.text-white
                        h5.mb-0
                          i.bi.bi-arrows-move.me-2
                          | MVC with AJAX
                      .card-body
                        p.card-text.
                          This approach is an MVC form page using JavaScript AJAX technology to make calls to the API endpoints to respond to user requests.
                          This approach is perfect for developers who want to create a more dynamic and responsive UI.

                  .col-md-6
                    .card.h-100.border-warning
                      .card-header.bg-warning.text-dark
                        h5.mb-0
                          i.bi.bi-layout-three-columns.me-2
                          | Razor Pages
                      .card-body
                        p.card-text.
                          Another user interface implementation option available for ASP.Net MVC is Razor Pages.
                          In this approach, the logic for handling requests and rendering views is contained in a single Razor page,
                          rather than a separate controller and view.

                figure.mt-4.text-center
                  img.img-fluid.rounded.shadow(
                    src='assets/img/MarkHazleton-SampleMvcCRUD-RazorPages.png'
                    alt='SampleMVCCrud Razor Pages'
                    loading='lazy'
                  )
                  figcaption.text-muted.mt-2.small SampleMvcCRUD Razor Pages Implementation

          // Advanced Features Section
          section#features.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-secondary.text-white
                h2.card-title.mb-0
                  i.bi.bi-star.me-2
                  | Advanced Features
              .card-body
                .row.g-4
                  .col-md-6
                    .card.h-100.border-light
                      .card-header.bg-light
                        h4.mb-0
                          i.bi.bi-person-circle.me-2
                          | Profile Pictures
                      .card-body
                        p.
                          One of the features I wanted to add to the SampleMvcCRUD application was the ability to upload
                          profile pictures for employees. There are various ways to achieve this, including storing the images
                          in a database or on a cloud storage service like Amazon S3. However, after some consideration,
                          I decided to keep things simple and store the images directly on the local file system of the application.

                        figure.text-center.mb-3
                          img.img-fluid.rounded.shadow(
                            src='assets/img/MarkHazleton-SampleMvcCRUD-ProfilePicture.png'
                            alt='SampleMVCCrud Profile Picture'
                            loading='lazy'
                          )
                          figcaption.text-muted.mt-2.small Employee Profile Picture Upload

                        p.
                          To implement this feature, I added a new field to the Employee model to store the file path of the profile picture.
                          Then, I created a new view in the EmployeeController for uploading the image file and saving it to the local file system.
                          I used the built-in System.IO namespace in .Net Core to handle file input/output operations.

                  .col-md-6
                    .card.h-100.border-light
                      .card-header.bg-light
                        h4.mb-0
                          i.bi.bi-table.me-2
                          | PivotTable.js
                      .card-body
                        p.
                          Adding a Pivot Table feature can enhance the user experience and provide powerful data analysis capabilities.
                          A pivot table is a data summarization tool used in spreadsheets and databases, which allows for the quick and easy
                          analysis of large amounts of data.

                        figure.text-center.mb-3
                          a(href='https://pivottable.js.org/examples/' target='_blank' rel='noopener noreferrer')
                            img.img-fluid.rounded.shadow(
                              src='assets/img/pivot-table-animation.gif'
                              alt='PivotTable.JS Animation'
                              loading='lazy'
                            )
                          figcaption.text-muted.mt-2.small Interactive PivotTable.js Demo

                        p.
                          PivotTable.js is an open-source JavaScript library that provides a simple and powerful way to create pivot tables
                          in web applications. It allows developers to easily create dynamic, drag-and-drop pivot tables that work with
                          large datasets.

                .alert.alert-success.mt-4
                  h5.alert-heading
                    i.bi.bi-check-circle.me-2
                    | Enhanced Data Analysis
                  p.mb-0.
                    Implementing a Pivot Table feature using PivotTable.js provides valuable insights and improves the user experience.
                    Users can quickly analyze and visualize data, and the drag-and-drop functionality makes it easy to change the layout
                    of the table to explore different relationships between the data.

                figure.mt-4.text-center
                  img.img-fluid.rounded.shadow(
                    src='assets/img/MarkHazleton-SampleMvcCRUD-PivotTable.png'
                    alt='SampleMVCCrud Pivot Table'
                    loading='lazy'
                  )
                  figcaption.text-muted.mt-2.small SampleMvcCRUD PivotTable Implementation

          // Deployment Options Section
          section#deployment.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-danger.text-white
                h2.card-title.mb-0
                  i.bi.bi-cloud-upload.me-2
                  | Application Deployment Options
              .card-body
                p.
                  Deploying an application is just as important as developing it, and the SampleMvcCRUD project demonstrates several deployment options.
                  When it comes to deploying an application, there are many cloud computing options available.
                  For this application, I chose to demonstrate 2 of these options as they are the most common.

                .row.g-4.mb-4
                  .col-md-6
                    .card.h-100.border-info
                      .card-header.bg-info.text-white
                        h4.mb-0
                          i.bi.bi-server.me-2
                          | Infrastructure as a Service (IaaS)
                      .card-body
                        p.card-text.
                          IaaS is the more basic category of cloud computing, which allows you to rent IT infrastructure like servers,
                          virtual machines, storage, networks, and operating systems from a cloud provider on a pay-as-you-go basis.
                          With IaaS, you have more control over the infrastructure and can choose exactly what you need to run your
                          application.

                  .col-md-6
                    .card.h-100.border-success
                      .card-header.bg-success.text-white
                        h4.mb-0
                          i.bi.bi-layers.me-2
                          | Platform as a Service (PaaS)
                      .card-body
                        p.card-text.
                          PaaS is a higher-level service that provides a pre-configured platform for application development and deployment.
                          This includes everything from the operating system to the middleware, database management, and application runtime
                          environment. With PaaS, you don't need to worry about the underlying infrastructure.

                h4.mb-3.text-primary Current Deployment Environments
                .row.g-3
                  .col-md-4
                    .card.text-center.border-primary
                      .card-body
                        i.bi.bi-microsoft.display-6.text-primary.mb-3
                        h5.card-title Azure Virtual Machine
                        p.card-text.small .NET 9 IaaS deployment
                        a.btn.btn-outline-primary.btn-sm(
                          href='https://samplecrud.markhazleton.com'
                          target='_blank'
                          rel='noopener noreferrer'
                        ) Visit Site

                  .col-md-4
                    .card.text-center.border-success
                      .card-body
                        i.bi.bi-cloud.display-6.text-success.mb-3
                        h5.card-title Azure App Service
                        p.card-text.small .NET 9 Linux via GitHub Actions
                        a.btn.btn-outline-success.btn-sm(
                          href='https://samplecrud.azurewebsites.net'
                          target='_blank'
                          rel='noopener noreferrer'
                        ) Visit Site

                  .col-md-4
                    .card.text-center.border-warning
                      .card-body
                        i.bi.bi-box.display-6.text-warning.mb-3
                        h5.card-title Docker Hub
                        p.card-text.small .NET 7 Linux from Docker Hub
                        a.btn.btn-outline-warning.btn-sm(
                          href='https://samplemvccrud.azurewebsites.net'
                          target='_blank'
                          rel='noopener noreferrer'
                        ) Visit Site

          // DevOps & Containerization Section
          section#devops.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-dark.text-white
                h2.card-title.mb-0
                  i.bi.bi-gear.me-2
                  | DevOps & Containerization
              .card-body
                .alert.alert-info
                  h5.alert-heading
                    i.bi.bi-lightbulb.me-2
                    | What is DevOps?
                  p.mb-0.
                    DevOps is a relatively new approach to software development that combines development and operations teams to work
                    collaboratively throughout the entire software development life cycle. At its core, DevOps is a philosophy that
                    emphasizes the importance of communication and collaboration between these teams to deliver high-quality software at a faster pace.

                h4.mb-3.text-primary Continuous Integration & Deployment (CI/CD)
                p.
                  One of the key concepts of DevOps is Continuous Integration and Continuous Deployment (CI/CD), which involves automating the
                  process of building, testing, and deploying software. This helps to ensure that any new code changes are thoroughly tested
                  and deployed quickly and efficiently.

                p.
                  GitHub Actions enables developers to create automated workflows,
                  triggered by events such as a pull request, that can build, test, and deploy their code automatically.
                  These workflows can include gates that check that any new code compiles and passes automated tests before it is
                  merged into the main branch of the repository.

                figure.mb-4.text-center
                  a(href='https://github.com/markhazleton/SampleMvcCRUD/blob/main/.github/workflows/main_mwhsampleweb.yml' target='_blank' rel='noopener noreferrer')
                    img.img-fluid.rounded.shadow(
                      src='assets/img/MarkHazleton-SampleMvcCRUD-GitHubActions.png'
                      alt='GitHub Action for SampleMvcCRUD'
                      loading='lazy'
                    )
                  figcaption.text-muted.mt-2.small GitHub Actions CI/CD Pipeline Configuration

                h4.mb-3.text-success Application Containerization
                p.
                  Containerization is another important aspect of DevOps that involves packaging an application into a container
                  that can be deployed consistently across different environments. Docker is a popular containerization platform that
                  allows developers to build, test, and deploy their applications in a standardized way.

                .row.g-4.mb-4
                  .col-md-6
                    .card.border-info
                      .card-header.bg-info.text-white
                        h5.mb-0
                          i.bi.bi-box.me-2
                          | Docker Benefits
                      .card-body
                        ul.list-unstyled.mb-0
                          li.mb-2
                            i.bi.bi-check-circle.text-success.me-2
                            | Consistent deployment across environments
                          li.mb-2
                            i.bi.bi-check-circle.text-success.me-2
                            | Simplified dependency management
                          li.mb-2
                            i.bi.bi-check-circle.text-success.me-2
                            | Reduced environment-specific issues
                          li.mb-0
                            i.bi.bi-check-circle.text-success.me-2
                            | Easy scaling and orchestration

                  .col-md-6
                    .card.border-warning
                      .card-header.bg-warning.text-dark
                        h5.mb-0
                          i.bi.bi-cloud-arrow-up.me-2
                          | Deployment Process
                      .card-body
                        ol.list-group.list-group-numbered.list-group-flush
                          li.list-group-item.border-0.px-0 Build container image
                          li.list-group-item.border-0.px-0 Test in development
                          li.list-group-item.border-0.px-0 Push to Docker Hub
                          li.list-group-item.border-0.px-0 Deploy to production

                figure.mb-4.text-center
                  a(href='https://hub.docker.com/r/markhazleton/mwhsampleweb' target='_blank' rel='noopener noreferrer')
                    img.img-fluid.rounded.shadow(
                      src='assets/img/MarkHazleton-SampleMvcCRUD-DockerHub.png'
                      alt='DockerHub container for SampleMvcCRUD'
                      loading='lazy'
                    )
                  figcaption.text-muted.mt-2.small SampleMvcCRUD Docker Hub Repository

                p.
                  Containerization is a powerful tool for modern application development and deployment, allowing developers to
                  easily package and deploy applications across multiple environments with consistency and reliability.
                  While there are some potential drawbacks to containerization, these can generally be mitigated with careful planning
                  and management and the benefits of containerization make it well worth considering for any modern application deployment.

          // Conclusion Section
          section#conclusion.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-primary.text-white
                h2.card-title.mb-0
                  i.bi.bi-mortarboard.me-2
                  | Lifelong Learning Journey
              .card-body
                .alert.alert-success
                  h5.alert-heading
                    i.bi.bi-lightbulb.me-2
                    | Continuous Improvement
                  p.mb-0.
                    As a lifelong learner, I'm always seeking out new techniques and approaches to improve my development skills.
                    That's why I wanted to share my experience with a GitHub project that demonstrates ASP.Net MVC applications with CRUD operations.

                p.
                  The SampleMvcCRUD project has become something of a "Swiss Army knife" for me, allowing me to test out new approaches and methods,
                  as well as upgrades to the latest versions of both .NET Core and NuGet packages.

                p.
                  In this project, I have explored multiple ways to implement CRUD operations using different approaches in Microsoft .NET frameworks.
                  I have also discussed the use of containerization, continuous integration and deployment (CI/CD), and other modern development practices.

                .card.border-info.mb-4
                  .card-header.bg-info.text-white
                    h5.mb-0
                      i.bi.bi-arrow-repeat.me-2
                      | Never Stop Learning
                  .card-body
                    p.card-text.
                      And the learning never stops. For example, I only recently added a section on the use of the Bogus library to create sample
                      data on every run of the application. This is just one example of how we're always experimenting with new tools and techniques
                      to improve our development skills.

                p.
                  So if you're a fellow lifelong learner, I invite you to follow the SampleMvcCRUD project and see what new updates and techniques
                  have been added. And if you have any suggestions or ideas for new sections or features, feel free to let me know – because as
                  developers, we're always learning.

                .text-center.mt-4
                  a.btn.btn-primary.btn-lg(
                    href='https://github.com/markhazleton/SampleMvcCRUD'
                    target='_blank'
                    rel='noopener noreferrer'
                  )
                    i.bi.bi-github.me-2
                    | Explore the Project



