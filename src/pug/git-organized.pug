extends layouts/modern-layout

block variables
  - var pageTitle = 'Expert Insights to Git Savvy'
  - var pageDescription = 'Comprehensive guide to Git for software developers covering basics, Git Flow, pull requests, and repository management best practices by Mark Hazleton.'
  - var pageKeywords = 'Git, version control, software development, Git Flow, pull requests, code repository management, Git tutorial, Git guide'
  - var pageCanonical = 'https://markhazleton.com/git-organized.html'

block pagehead
  title= pageTitle
  meta(name='description', content=pageDescription)
  meta(name='keywords', content=pageKeywords)
  meta(name='author', content='Mark Hazleton')
  meta(name='subject', content='Software Development: Git Version Control')
  meta(name='robots', content='index, follow')
  meta(name='language', content='English')
  meta(name='revisit-after', content='7 days')

block og_overrides
  meta(property='og:title', content=pageTitle)
  meta(property='og:description', content=pageDescription)
  meta(property='og:url', content=pageCanonical)
  meta(property='og:type', content='article')
  meta(property='og:image', content='/assets/img/MarkHazleton-Git-Organized.png')

block twitter_overrides
  meta(name='twitter:card', content='summary_large_image')
  meta(name='twitter:title', content=pageTitle)
  meta(name='twitter:description', content=pageDescription)
  meta(name='twitter:image', content='/assets/img/MarkHazleton-Git-Organized.png')

block canonical
  link(rel='canonical', href=pageCanonical)

block layout-content
  // Hero Section
  section.bg-gradient-primary.py-5
    .container
      .row.align-items-center
        .col-lg-10.mx-auto.text-center
          h1.display-4.fw-bold.mb-3
            i.bi.bi-git.me-3
            | Expert Insights to Git Savvy
          h2.h3.mb-4 A Guide to Organized Version Control
          p.lead.mb-5.
            Master Git version control with this comprehensive guide covering basics, Git Flow, pull requests, and repository management best practices.
            Whether you're a beginner or experienced developer, discover valuable tips to improve your productivity and collaboration.

  // Main Article
  article#main-article
    .container
      .row
        .col-lg-8.mx-auto
          .article-meta.text-muted.mb-4
            time(datetime='2024-05-28') May 28, 2024
            span.mx-2 •
            span 15 min read
            span.mx-2 •
            span by Mark Hazleton

          figure.mb-5.text-center
            img.img-fluid.rounded.shadow(
              src='/assets/img/MarkHazleton-Git-Organized.png'
              alt='Git Organized Version Control'
              title='Git Organized Version Control. Image Credit: ChatGPT and Dall-E'
              loading='lazy'
            )
            figcaption.text-muted.mt-2.small Git Organized Version Control

          // Table of Contents
          nav.mb-5(aria-label='Table of Contents')
            .card
              .card-header.bg-primary
                h3.mb-0
                  i.bi.bi-list-ul.me-2
                  | Contents
              .card-body
                ol.list-group.list-group-numbered.list-group-flush
                  li.list-group-item
                    a.text-decoration-none(href='#introduction') Introduction to Git
                  li.list-group-item
                    a.text-decoration-none(href='#distributed') Distributed Version Control
                  li.list-group-item
                    a.text-decoration-none(href='#git-flow') Git Flow Strategy
                  li.list-group-item
                    a.text-decoration-none(href='#pull-requests') Pull Requests & Code Protection
                  li.list-group-item
                    a.text-decoration-none(href='#organization') Repository Organization
                  li.list-group-item
                    a.text-decoration-none(href='#red-flags') Branching Red Flags
                  li.list-group-item
                    a.text-decoration-none(href='#conclusion') Conclusion          // Introduction Section
          section#introduction.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-light
                h2.card-title.mb-0
                  i.bi.bi-info-circle.text-primary.me-2
                  | Get to Know Git
              .card-body
                h3.h5.text-muted.mb-3 An introduction to Git
                p.
                  Git, the distributed version control system that has become ubiquitous in software development,
                  was first created by Linus Torvalds in 2005. Torvalds was frustrated with the limitations of the
                  centralized version control systems that were available at the time and wanted to create a system that
                  would allow developers to collaborate on projects remotely. Git was the result of his efforts.
                p.
                  In the years since its release, Git has continued to evolve and improve, with contributions from developers
                  all over the world. Today, it is the go-to choice for version control in most software development projects
                  and has become an essential tool for collaborating on code and managing complex software projects.
                  Git's success is a testament to the power of open-source software, and to the passion and dedication of the
                  many developers who have contributed to its development over the years.

          // Distributed Version Control Section
          section#distributed.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-success
                h2.card-title.mb-0
                  i.bi.bi-diagram-3.me-2
                  | Get Distributed
              .card-body
                h3.h5.text-muted.mb-3 Distributed Version Control
                p.
                  Git is a distributed version control system which means that every developer has a copy of the entire codebase on their
                  local machine. Since each developer has a local copy of the codebase, they can make changes, commit them locally, and even
                  switch between different branches of development without needing an internet connection. This is especially
                  useful for developers who work in remote or disconnected environments, such as on a plane or in a location
                  without reliable internet access. Once they're back online, they can push their changes to the remote repository.
                  This makes it easy to collaborate on code and maintain version history.

          // Git Flow Section
          section#git-flow.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-info
                h2.card-title.mb-0
                  i.bi.bi-flow-chart.me-2
                  | Get With the Flow
              .card-body
                h3.h5.text-muted.mb-3 Managing Multiple Contributors
                p.
                  As software development projects grow in size and complexity, it becomes increasingly important to have a well-defined
                  branching strategy to manage code changes effectively. Without a proper strategy, it can be easy to introduce bugs,
                  slow down development, and make it difficult to manage and maintain the codebase.

                .alert.alert-info.d-flex.align-items-center.mb-3
                  i.bi.bi-lightbulb.me-2
                  div
                    strong Historical Context:
                    | The Git Flow branching strategy was created by Vincent Driessen in 2010 with the article:
                    a.alert-link(href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener") A successful Git branching model

                p.
                  Git Flow solves the problem of having an unorganized and inconsistent branching strategy in software development projects.
                  Before Git Flow, teams would often have their own ad hoc branching strategies that made it difficult for developers
                  to understand what code was in which stage of development, and merge conflicts were common.
                  Git Flow standardized a set of permanent and transitory branches for features and hotfixes, making it easier for
                  developers to collaborate and manage changes.

                .row.mt-4
                  .col-md-6
                    .card.h-100.border-primary
                      .card-header.bg-primary.text-center
                        h4.mb-0
                          i.bi.bi-bookmark.me-2
                          | Permanent Branches
                      .card-body
                        ul.list-unstyled
                          li.mb-2
                            i.bi.bi-shield-check.text-success.me-2
                            strong MAIN:
                            | Stable production code
                          li
                            i.bi.bi-gear.text-warning.me-2
                            strong DEVELOP:
                            | Latest tested changes

                  .col-md-6
                    .card.h-100.border-secondary
                      .card-header.bg-secondary.text-center
                        h4.mb-0
                          i.bi.bi-arrow-left-right.me-2
                          | Supporting Branches
                      .card-body
                        ul.list-unstyled
                          li.mb-2
                            i.bi.bi-plus-circle.text-primary.me-2
                            strong Feature:
                            | New functionality
                          li.mb-2
                            i.bi.bi-tag.text-info.me-2
                            strong Release:
                            | Preparation for deployment
                          li
                            i.bi.bi-exclamation-triangle.text-danger.me-2
                            strong Hotfix:
                            | Critical production fixes

          // Pull Requests Section
          section#pull-requests.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-warning.text-dark
                h2.card-title.mb-0
                  i.bi.bi-shield-check.me-2
                  | Get It Together
              .card-body
                h3.h5.text-muted.mb-3 How the Pull Request Protects the Codebase
                p.
                  In modern software development, projects often have multiple contributors working on different features or
                  fixes simultaneously. Pull Requests (PRs) help manage these contributions by allowing developers to propose
                  changes to the codebase, and to have those changes reviewed and validated by other members of the team before
                  they are merged into the main codebase.

                .alert.alert-warning.d-flex.align-items-center.mb-3
                  i.bi.bi-info-circle.me-2
                  div
                    strong Note:
                    | While PRs are not part of Git itself, they were introduced by systems that host Git repositories,
                    such as GitHub, Azure DevOps, and others. They have become an essential part of the development process.

                p.
                  A PR Gate is a mechanism used in DevOps to ensure that the merge code is validated with a build and unit tests
                  before the PR is merged into the main codebase. This helps ensure that code quality is maintained and that no
                  regressions or errors are introduced into the system.

                .row.g-3.mt-3
                  .col-md-4
                    .card.h-100.text-center.border-success
                      .card-body
                        i.bi.bi-people.display-6.text-success.mb-3
                        h5.card-title Multiple Approvers
                        p.card-text.small Require team review and approval before merging

                  .col-md-4
                    .card.h-100.text-center.border-info
                      .card-body
                        i.bi.bi-link-45deg.display-6.text-info.mb-3
                        h5.card-title Work Item Linking
                        p.card-text.small Connect PRs to specific user stories or tasks

                  .col-md-4
                    .card.h-100.text-center.border-primary
                      .card-body
                        i.bi.bi-graph-up.display-6.text-primary.mb-3
                        h5.card-title Coverage Requirements
                        p.card-text.small Ensure unit test coverage improvements          // Repository Organization Section
          section#organization.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-dark.text-white
                h2.card-title.mb-0
                  i.bi.bi-folder-fill.me-2
                  | Get Organized
              .card-body
                h3.h5.text-muted.mb-3 How to Keep Your Repositories from Going Rogue

                .alert.alert-primary.d-flex.align-items-center.mb-4
                  i.bi.bi-exclamation-circle.me-2
                  div
                    strong Take Control:
                    | End the war against rogue code repositories! Let's explore strategies to keep your repositories organized and prevent them from turning to the dark side.

                p.
                  You have likely battled your fair share of rogue code on your hard drive.
                  It's time to end this war once and for all!
                  Let us explore some strategies to keep your repositories in line
                  and prevent them from going rogue. Let's take control of our
                  code clones before they turn to the dark side and start a war.

                // Organization Strategies
                .row.g-4.mt-3
                  .col-12
                    .card.border-primary
                      .card-header.bg-primary.text-white
                        h4.mb-0
                          i.bi.bi-folder2-open.me-2
                          | Folder Structure Strategy
                      .card-body
                        p.mb-3.
                          When cloning a repository from platforms like GitHub or Azure DevOps, create a folder
                          structure on your local machine that reflects the platform you're using. For example:

                        .bg-light.p-3.rounded.mb-3
                          code.text-dark C:\GitHub\{username}\{repository}

                        p.
                          This helps you keep track of where code is stored
                          and avoid cluttering the file system with unorganized code.

                        figure.text-center.mt-4
                          img.img-fluid.rounded.shadow(
                            src='assets/img/MarkHazleton-GitOrganized-FolderStructure.png'
                            alt='Git Organized Folder Structure'
                            loading='lazy'
                          )
                          figcaption.text-muted.mt-2.small Git Organized Folder Structure

                  .col-md-6
                    .card.h-100.border-success
                      .card-header.bg-success.text-white
                        h4.mb-0
                          i.bi.bi-bezier2.me-2
                          | Branching Best Practices
                      .card-body
                        ul.list-unstyled
                          li.mb-3
                            i.bi.bi-check-circle.text-success.me-2
                            strong Create feature branches:
                            | Always work on feature branches, never directly on develop
                          li.mb-3
                            i.bi.bi-arrow-repeat.text-primary.me-2
                            strong Sync regularly:
                            | Keep your branches up to date with remote repository
                          li.mb-3
                            i.bi.bi-share.text-info.me-2
                            strong Fork when contributing:
                            | Create your own copy for external projects
                          li
                            i.bi.bi-download.text-warning.me-2
                            strong Pull latest changes:
                            | Regularly update your fork from original repository

                  .col-md-6
                    .card.h-100.border-warning
                      .card-header.bg-warning.text-dark
                        h4.mb-0
                          i.bi.bi-calendar-check.me-2
                          | Daily Workflow
                      .card-body
                        ul.list-unstyled
                          li.mb-3
                            i.bi.bi-arrow-clockwise.text-primary.me-2
                            strong Stay current:
                            | Keep local repository synced with develop branch
                          li.mb-3
                            i.bi.bi-clock.text-info.me-2
                            strong Daily updates:
                            | Update feature branch with develop at least once daily
                          li.mb-3
                            i.bi.bi-x-circle.text-danger.me-2
                            strong Never work on develop:
                            | Always use feature branches for development
                          li
                            i.bi.bi-shield-check.text-success.me-2
                            strong Limit conflicts:
                            | Regular syncing prevents merge conflicts

                // Repository Maintenance
                .card.mt-4.border-danger
                  .card-header.bg-danger.text-white
                    h4.mb-0
                      i.bi.bi-tools.me-2
                      | Repository Maintenance
                  .card-body
                    p.
                      Keeping repositories (Origin/remote and local) in sync within Visual Studio can be confusing.
                      Visual Studio does not always update all the remote branches when they are deleted.

                    figure.text-center.my-4
                      img.img-fluid.rounded.shadow(
                        src='assets/img/MarkHazleton-GitOrganized-VisualStudioSetting.png'
                        alt='Git Organized Visual Studio Setting'
                        loading='lazy'
                      )
                      figcaption.text-muted.mt-2.small Visual Studio Git Settings

                    .alert.alert-info.d-flex.align-items-center
                      i.bi.bi-terminal.me-2
                      div
                        strong Command Line Solution:
                        | Use Git command line to prune deleted remote branches:

                    .bg-dark.text-light.p-3.rounded
                      code $ git remote prune origin

                .alert.alert-secondary.mt-4
                  h5.alert-heading
                    i.bi.bi-info-circle.me-2
                    | Platform Options
                  p.mb-0.
                    GitHub and Azure DevOps are not the only hosted Git repositories available. Other popular options
                    include GitLab, Bitbucket, GitKraken, SourceForge, and AWS CodeCommit. Each platform has its own
                    unique features and benefits, so evaluate your needs and choose the one that best fits your workflow.          // Branching Red Flags Section
          section#red-flags.mb-5
            .card.border-0.shadow-sm
              .card-header.bg-danger.text-white
                h2.card-title.mb-0
                  i.bi.bi-flag-fill.me-2
                  | Branching Red Flags
              .card-body
                p.lead.mb-4.
                  A quick review of your repository can help you identify potential issues that could cause headaches in the future.
                  Here are the warning signs to watch for:

                .row.g-4
                  .col-md-6
                    .card.h-100.border-warning
                      .card-header.bg-warning.text-dark
                        h4.mb-0
                          i.bi.bi-exclamation-triangle.me-2
                          | Naming & Structure Issues
                      .card-body
                        .mb-3
                          h5.text-danger
                            i.bi.bi-x-circle.me-2
                            | Improper Named Branches
                          p.small.
                            There should only be 2 branches at the root: "Develop" and "Master" (or Main).
                            All other branches should be organized in folders (feature, hotfix, release, [Users]).

                        .mb-3
                          h5.text-warning
                            i.bi.bi-clock-history.me-2
                            | Out of Date Branches
                          p.small.
                            When a branch is more than 10-20 commits behind, there's a high probability of merge conflicts.
                            Monitor the commits behind/ahead column in your repository.

                  .col-md-6
                    .card.h-100.border-danger
                      .card-header.bg-danger.text-white
                        h4.mb-0
                          i.bi.bi-bug.me-2
                          | Process Violations
                      .card-body
                        .mb-3
                          h5.text-danger
                            i.bi.bi-arrow-down-circle.me-2
                            | Pull Requests Behind Develop
                          p.small.
                            All pull requests should be 0 commits behind develop branch to avoid creating
                            untested code states during merge.

                        .mb-3
                          h5.text-warning
                            i.bi.bi-layers.me-2
                            | Multiple Release Branches
                          p.small.
                            Ideally, only one deployment branch at a time. Multiple release branches
                            should be rare and short-lived.

                  .col-md-6
                    .card.h-100.border-info
                      .card-header.bg-info.text-white
                        h4.mb-0
                          i.bi.bi-hourglass.me-2
                          | Timing Issues
                      .card-body
                        .mb-3
                          h5.text-info
                            i.bi.bi-calendar-x.me-2
                            | OLD Pull Requests
                          p.small.
                            Pull requests taking over a week should be abandoned.
                            Create a new PR when the feature branch is ready for review.

                  .col-md-6
                    .card.h-100.border-secondary
                      .card-header.bg-secondary.text-white
                        h4.mb-0
                          i.bi.bi-link.me-2
                          | Documentation Issues
                      .card-body
                        .mb-3
                          h5.text-secondary
                            i.bi.bi-journal-x.me-2
                            | Unlinked Work Items
                          p.small.
                            Link at least one work item to each pull request.
                            This small effort makes tracking work much easier later.

                .alert.alert-success.mt-4.d-flex.align-items-center
                  i.bi.bi-check-circle.me-2
                  div
                    strong Best Practice:
                    | Following these file management strategies ensures organized and efficient collaboration with remote repositories.

          // Conclusion Section
          section#conclusion.mb-5
            .card.border-0.shadow-lg
              .card-header.bg-gradient-primary.text-center
                h2.card-title.mb-0
                  i.bi.bi-trophy.me-2
                  | Conclusion: Master Your Git Workflow
              .card-body.p-4
                p.lead.text-center.mb-4.
                  Git is a powerful tool that allows developers to track changes in their code, collaborate with others, and
                  manage projects efficiently. Success comes from following established best practices and continuous learning.

                .row.g-4.mb-4
                  .col-md-4.text-center
                    .p-3
                      i.bi.bi-git.display-4.text-primary.mb-3
                      h4 Git Flow Strategy
                      p.small Implement consistent branching strategies for organized development

                  .col-md-4.text-center
                    .p-3
                      i.bi.bi-shield-check.display-4.text-success.mb-3
                      h4 Pull Request Protection
                      p.small Use code reviews and automated gates to maintain quality

                  .col-md-4.text-center
                    .p-3
                      i.bi.bi-people.display-4.text-info.mb-3
                      h4 Team Collaboration
                      p.small Foster effective teamwork through organized repository management

                .alert.alert-primary.text-center
                  h4.alert-heading
                    i.bi.bi-lightbulb.me-2
                    | Keep Learning and Growing
                  p.mb-0.
                    Using Git requires ongoing learning and practice. As you encounter new situations and challenges,
                    don't hesitate to ask questions, reach out to colleagues, or seek help from online communities.
                    With time and experience, you can become a Git master and streamline your development process like never before.

                .text-center.mt-4
                  p.lead.mb-0.
                    Thank you for taking the time to read this article. I hope it has been informative and helpful in improving your Git practices.
                  p.text-muted.small Ready to "git" organized and improve your workflow? Start implementing these strategies today!
