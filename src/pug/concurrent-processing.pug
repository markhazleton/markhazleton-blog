extends layouts/articles

block pagehead
  title Concurrent Processing in C#: Mark Hazleton
  meta(name='description', content='Dive into the intricacies of concurrent processing through C# code with Mark Hazleton. Explore synchronization, task autonomy, error handling, and much more in a hands-on journey. Delve into a real-world project and learn how to effectively manage multiple tasks in C#. Explore now!')
  meta(name='keywords', content='Concurrent Processing, C# Concurrency, Task Autonomy, Synchronization, Thread Safety, Scalability, Error Handling, Load Balancing, Deadlocks, Livelocks, Resource Management, C# Programming')
  meta(name='author', content='Mark Hazleton')
  link(rel='canonical', href='https://markhazleton.controlorigins.com/concurrent-processing.html')

block layout-content

  section#post.painteddesert-section.painteddesert-section-background
    .painteddesert-section-content
      h1.mb-0 Concurrent Processing
      .subheading.mb-3 Learning Concurrent Processing Through Code
      p.lead.
        As a developer, one of the most exciting aspects of programming is the opportunity to learn new concepts and techniques.
        Recently, I embarked on a journey to understand concurrent processing better, and I'm excited to share my experience with you.
      p.
        The idea of managing multiple tasks simultaneously has always fascinated me.
        However, it can be a complex challenge, requiring synchronization and careful management to avoid issues like
        race conditions and deadlocks.
        To dive into this topic, I decided to develop a C# console application that would allow me to experiment
        and learn practically.

      h2 Considerations for Concurrent Processing
      dl
        dt Task Autonomy and Independence
        dd.
          For multiple tasks to effectively run concurrently,
          each task must encapsulate an autonomous and self-contained unit of functionality.
          Autonomy ensures that a task operates independently, free from unnecessary dependencies on other tasks or shared resources.
          By embodying its inputs, logic, and outputs, an autonomous task can be executed without hindrance,
          allowing it to be scheduled and managed alongside other tasks concurrently.
          This approach not only enhances the efficiency and responsiveness of the overall system
          but also minimizes the potential for contention and synchronization issues.
        dt Synchronization
        dd.
          Ensuring proper synchronization is crucial to prevent race conditions and ensure data consistency
          among multiple threads or tasks. Techniques like locks, semaphores,
          and monitors can be used to control access to shared resources.

        dt Scalability
        dd.
          Consider the scalability of your concurrent processing solution.
          Will it perform well as the number of concurrent tasks or threads increases?
          Design your system to handle increased load without degrading performance.

        dt Deadlocks and Livelocks
        dd.
          Be aware of potential deadlocks and livelocks that can occur when multiple threads are waiting for resources
          that are held by other threads. Avoid circular dependencies and ensure proper resource allocation/release to prevent these issues.

        dt Resource Management
        dd.
          Properly manage resources such as memory, file handles, and network connections.
          Failing to release resources can lead to resource exhaustion and degrade system performance.

        dt Thread Safety
        dd.
          Ensure that your code is thread-safe.
          Thread safety means that the behavior of a program remains consistent when multiple threads are executing simultaneously.
          Use techniques like immutable data, synchronization, and thread-local storage.

        dt Load Balancing
        dd.
          Distribute tasks evenly among threads or processing units to ensure efficient utilization of resources.
          Load balancing helps prevent scenarios where some threads are idle while others are overloaded.

        dt Task Granularity
        dd.
          Determine the appropriate level of task granularity.
          Too fine-grained tasks can lead to overhead due to thread management,
          while too coarse-grained tasks might not fully utilize available resources.

        dt Error Handling
        dd.
          Implement robust error-handling mechanisms for concurrent tasks.
          Unhandled exceptions in one task should not crash the entire application.

        dt Testing and Debugging
        dd.
          Testing concurrent code is challenging.
          Consider using techniques like stress testing and race condition detection tools to identify issues.
          Debugging concurrent issues can be complex, so use tools and techniques that help diagnose problems.

        dt Communication and Coordination
        dd.
          Threads or tasks might need to communicate and coordinate with each other.
          Consider using mechanisms like message queues, shared memory, and events to facilitate inter-thread communication.

      h2 Potential Drawbacks in Concurrent Programming
      p.
        While concurrent programming boosts performance and resource utilization, it comes with challenges:
      ul
        li Risk of Deadlocks and Livelocks.
        li Difficulty in Debugging and Testing.
        li Potential for Race Conditions.
        li Increased Memory Consumption.
        li Complexity in Code Management and Maintenance.
      p.
        By understanding these challenges, developers can employ strategies to mitigate risks
        and harness the benefits of concurrency in their projects.

      p.
        Since this was a one-off project, I didn't want to spend too much time on the user interface.
        I created a repository to create a simple console application that would allow me to focus on the core functionality.
        <a href="https://github.com/markhazleton/ConcurrentProcessing" title="Concurrent Processing C# Project on GitHub by Mark Hazleton" target='_blank' rel='noopener noreferrer'>View the Concurrent Processing C# Project on GitHub</a>

      p.
        I started with a ChatGPT prompt that introduced me to the basics of concurrent processing.
        Armed with this initial guidance, I started writing the code.
        Before long I had the basic scaffolding in place, and I was ready to start iterating and learning.

      pre.code.

        const int maxConcurrency = 100; // Maximum concurrent tasks allowed
        SemaphoreSlim semaphore = new(maxConcurrency);
        List&lt;Task&gt; tasks = new();
        int? taskId = 0;
        while (taskId is not null)
        {
          Task task = ProcessAsync(taskId.Value, tasks.Count, await AwaitSemaphoreAsync(semaphore), semaphore);
          tasks.Add(task);
          taskId = GetNextTaskId(taskId);

          if (tasks.Count >= maxConcurrency)
          {
            Task finishedTask = await Task.WhenAny(tasks);
            tasks.Remove(finishedTask);
          }
        }
        await Task.WhenAll(tasks);

      p.
        I created a function to wait for a semaphore to be released and added some telemetry to track the time spent waiting.
      pre.code.

        //  Wait for semaphore to be released so that next task can start
        static async Task&lt;long&gt; AwaitSemaphoreAsync(SemaphoreSlim semaphore)
        {
          Stopwatch stopwatch = Stopwatch.StartNew();
          await semaphore.WaitAsync();
          stopwatch.Stop();
          return stopwatch.ElapsedTicks;
        }

      p.
        I created a mock async processing method that simulates work by delaying for a random amount of time.
        I also added telemetry data so that I could track the task ID, task count, semaphore count, and wait time.
        I used the `Task.Delay` method to simulate work, but in a real-world application, this would be replaced with actual work.
        The random delay was added to simulate the dynamic nature of concurrent processing.

      pre.code.

        // Mock Async Task to simulate work
        static async Task ProcessAsync(int taskId, int taskCount, long waitTicks, SemaphoreSlim semaphore)
        {
          try
          {
            await Task.Delay(TimeSpan.FromMilliseconds(new Random().Next(1, 500)));
            Console.WriteLine($"Task:{taskId:D3} T:{taskCount} S:{semaphore.CurrentCount} W:{waitTicks}");
          }
          finally
          {
            semaphore.Release();
          }
        }


      p.
        Finally, I created a function to generate the next task ID.  This is how I controlled the number of tasks that were created.

      pre.code.

        // Get Next Task ID
        static int? GetNextTaskId(int? taskId)
        {
          if (taskId &lt; 1000) return taskId + 1;
          else return null;
        }

      h2 Iterating and Learning
      p.
        As I dove into the code, I realized that understanding concurrent processing goes beyond just knowing how to create threads or tasks.
        I needed to comprehend the concept of synchronization and how to manage the number of concurrently executing tasks.
        The code I had started with was a great foundation, but it required iteration and refinement to achieve my goals.
      p.
        The heart of the application was the use of the `SemaphoreSlim` class, which acted as a gatekeeper to control the
        number of tasks running concurrently. This was a crucial lesson in managing shared resources and preventing resource exhaustion.
      h2 Experimenting and Observing
      p.
        With each iteration of the code, I ran the application and observed its behavior.
        The output of the program provided valuable insights into how tasks were being managed,
        the time each task spent waiting for a semaphore, and the overall concurrency control.
      pre.code.
        ...
        Task:061 T:61 S:2 W:2
        Task:070 T:70 S:0 W:4
        Task:037 T:37 S:0 W:2
        Task:018 T:18 S:3 W:2
        Task:023 T:23 S:1 W:2
        Task:026 T:26 S:2 W:3
        ...
      p.
        The output highlighted the dynamic nature of concurrent processing,
        where tasks were processed and released in a controlled manner,
        ensuring that the maximum concurrency was maintained while avoiding resource contention.
      h2 Celebrating Success
      p.
        After several iterations, moments of frustration, and numerous debug sessions,
        I finally achieved my desired result.
        The application was now a well-functioning demonstration of concurrent processing,
        showcasing my newfound understanding of synchronization and resource management.
      p.
        The journey was not just about the code; it was about the learning process itself.
        Developing this console application was a great learning tool that allowed me to
        grasp the intricacies of concurrent processing hands-on.
        It transformed abstract concepts into tangible knowledge.

      h2 Conclusion
      p.
        The world of concurrent processing is complex and fascinating.
        Through the development of this C# console application,
        I gained valuable insights into managing multiple tasks simultaneously while avoiding common pitfalls.
        The iterative process of refining the code helped me internalize the concepts and apply them effectively.
      p.
        I encourage fellow developers to try learning through practical coding.
        It's one thing to read about a topic, but a whole different experience to see it in action
        and work through challenges firsthand. With the right resources, curiosity, and determination,
        you can turn any coding endeavor into a powerful learning tool.
      p.
        Happy coding and exploring the world of concurrency!
